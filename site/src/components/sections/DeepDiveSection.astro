---
import { Image } from "astro:assets"
import H1 from "../typography/h1.astro"
import smallWhale from "../../assets/images/whale.png"
import { renderRichText, renderTitle } from "../../lib/contentful/render.ts"

const diver = [
  { id: "union", text: "What is Union?", meter: "200m" },
  { id: "interoperability", text: "What is Interoperability?", meter: "400m" },
  { id: "modularity", text: "What is Modularity?", meter: "600m" },
  { id: "cases", text: "Union Use Cases", meter: "800m" },
  { id: "works", text: "How Union Works", meter: "1000m" },
  { id: "verification", text: "Trust Verification", meter: "1200m" },
  { id: "galois", text: "Galois", meter: "1400m" },
  { id: "bls", text: "CometBLS", meter: "1600m" },
  { id: "voyager", text: "Voyager", meter: "1800m" }
]

const { entries } = Astro.props
---

<div class="flex justify-center py-24 text-lg font-mono" id="swim-container">
  <div class="relative grid grid-cols-2 gap-4 max-w-6xl px-6">
    <div
      class="flex flex-col col-span-full md:col-span-1 gap-12 md:gap-24 lg:gap-48"
    >
      <div id="union">
        <H1>
          <Fragment set:html={renderTitle(entries.firstTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.firstText)} />
        </div>
      </div>

      <div id="interoperability">
        <H1>
          <Fragment set:html={renderTitle(entries.secondTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.secondText)} />
        </div>
      </div>

      <div id="modularity">
        <H1>
          <Fragment set:html={renderTitle(entries.thirdTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.thirdText)} />
        </div>
      </div>

      <div id="cases">
        <H1>
          <Fragment set:html={renderTitle(entries.fourthTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.fourthText)} />
        </div>
      </div>

      <div id="works">
        <H1>
          <Fragment set:html={renderTitle(entries.fifthTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.fifthText)} />
        </div>
      </div>

      <div id="verification">
        <H1>
          <Fragment set:html={renderTitle(entries.sixthTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.sixthText)} />
        </div>
      </div>

      <div id="galois">
        <H1>
          <Fragment set:html={renderTitle(entries.seventhTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.seventhText)} />
        </div>
      </div>

      <div id="bls">
        <H1>
          <Fragment set:html={renderTitle(entries.eighthTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.eighthText)} />
        </div>
      </div>

      <div id="voyager">
        <H1>
          <Fragment set:html={renderTitle(entries.ninthTitle)} />
        </H1>
        <div class="flex flex-col md:max-w-[576px] w-full gap-8">
          <Fragment set:html={renderRichText(entries.ninthText)} />
        </div>
      </div>
    </div>

    <div class="relative col-span-1 hidden lg:block">
      <div class="sticky top-16 p-4 pr-0">
        <div class="flex gap-8 h-full justify-end font-mono">
          <div class="flex flex-col gap-6">
            {
              diver.map((item) => (
                <div class="h-16 flex items-center">
                  <a href={`#${item.id}`} class="hover:text-accent-500">
                    {item.text}
                  </a>
                </div>
              ))
            }
          </div>
          <div
            class="flex dive-gradient h-auto min-w-7 relative"
            id="swim-lane"
          >
            <Image
              id="scrolling-dot"
              src={smallWhale}
              alt="small whale"
              class="absolute w-10"
            />
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener("astro:page-load", () => {
      const dot = document.getElementById("scrolling-dot");
      const container = document.getElementById("swim-container");
      const swimlane = document.getElementById("swim-lane");

      // Check if all required elements exist
      if (!dot || !container || !swimlane) {
        console.warn("One or more required elements not found:", {
          dot: !!dot,
          container: !!container,
          swimlane: !!swimlane,
        });
        return;
      }

      const handleScroll = () => {
        try {
          const containerRect = container.getBoundingClientRect();
          const swimlaneRect = swimlane.getBoundingClientRect();

          const containerTop = containerRect.top;
          const containerHeight = containerRect.height;

          const swimlaneHeight = swimlaneRect.height;

          const scrollPosition = Math.max(
            0,
            Math.min(containerHeight, window.innerHeight - containerTop),
          );

          const scrollPercentage = scrollPosition / containerHeight;
          const maxDotPosition = swimlaneHeight - dot.offsetHeight;
          const newTop = scrollPercentage * maxDotPosition;

          dot.style.top = `${newTop}px`;
        } catch (error) {
          console.error("Error in scroll handler:", error);
        }
      };

      // Add scroll event listener
      window.addEventListener("scroll", handleScroll);

      // Initial position calculation
      handleScroll();

      // Clean up the event listener when navigating away
      document.addEventListener(
        "astro:before-preparation",
        () => {
          window.removeEventListener("scroll", handleScroll);
        },
        { once: true },
      );
    });
  </script>

  <style>
    .dive-gradient {
      background: linear-gradient(
        180deg,
        #ffffff 4%,
        #a0ecfd 7.13%,
        #030711 56%,
        #000000 100%
      );
    }
  </style>
</div>
