{
  "openapi": "3.0.3",
  "info": {
    "title": "Union Node REST API",
    "version": "0.0.1"
  },
  "servers": [
    {
      "url": "http://localhost:1317"
    }
  ],
  "paths": {
    "/cosmos/auth/v1beta1/account_info/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AccountInfo queries account info which is common to all account types.",
        "operationId": "Query_AccountInfo",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the account address string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAccountInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/accounts": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Accounts returns all the existing accounts.\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_Accounts",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAccountsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/accounts/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Account returns account details based on address.",
        "operationId": "Query_Account",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address defines the address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAccountResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/address_by_id/{accountId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AccountAddressByID returns account address based on account number.",
        "operationId": "Query_AccountAddressByID",
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "description": "account_id is the account number of the address to be queried.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "Deprecated, use account_id instead id is the account number of the address to be queried. This field should have been an uint64 (like all account numbers), and will be updated to uint64 in a future version of the auth query.",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAccountAddressByIDResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/bech32": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Bech32Prefix queries bech32Prefix",
        "operationId": "Query_Bech32Prefix",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Bech32PrefixResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/bech32/{addressBytes}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AddressBytesToString converts Account Address bytes to string",
        "operationId": "Query_AddressBytesToString",
        "parameters": [
          {
            "name": "addressBytes",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressBytesToStringResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/bech32/{addressString}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AddressStringToBytes converts Address string to bytes",
        "operationId": "Query_AddressStringToBytes",
        "parameters": [
          {
            "name": "addressString",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressStringToBytesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/module_accounts": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ModuleAccounts returns all the existing module accounts.",
        "operationId": "Query_ModuleAccounts",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModuleAccountsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/module_accounts/{name}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ModuleAccountByName returns the module account info by module name",
        "operationId": "Query_ModuleAccountByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModuleAccountByNameResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/auth/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params queries all parameters.",
        "operationId": "AuthParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/authz/v1beta1/grants": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Returns list of `Authorization`, granted to the grantee by the granter.",
        "operationId": "Query_Grants",
        "parameters": [
          {
            "name": "granter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grantee",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "msgTypeUrl",
            "in": "query",
            "description": "Optional, msg_type_url, when set, will query only grants matching given msg type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGrantsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/authz/v1beta1/grants/grantee/{grantee}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GranteeGrants returns a list of `GrantAuthorization` by grantee.",
        "operationId": "Query_GranteeGrants",
        "parameters": [
          {
            "name": "grantee",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGranteeGrantsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/authz/v1beta1/grants/granter/{granter}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GranterGrants returns list of `GrantAuthorization`, granted by granter.",
        "operationId": "Query_GranterGrants",
        "parameters": [
          {
            "name": "granter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGranterGrantsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/balances/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AllBalances queries the balance of all coins for a single account.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_AllBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query balances for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "resolveDenom",
            "in": "query",
            "description": "resolve_denom is the flag to resolve the denom into a human-readable form from the metadata.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAllBalancesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/balances/{address}/by_denom": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Balance queries the balance of a single coin for a single account.",
        "operationId": "Query_Balance",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query balances for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query balances for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBalanceResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denom_owners/{denom}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DenomOwners queries for all account addresses that own a particular token\n denomination.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_DenomOwners",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom defines the coin denomination to query all account holders for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDenomOwnersResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denom_owners_by_query": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DenomOwnersByQuery queries for all account addresses that own a particular token\n denomination.",
        "operationId": "Query_DenomOwnersByQuery",
        "parameters": [
          {
            "name": "denom",
            "in": "query",
            "description": "denom defines the coin denomination to query all account holders for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDenomOwnersByQueryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denoms_metadata": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DenomsMetadata queries the client metadata for all registered coin\n denominations.",
        "operationId": "Query_DenomsMetadata",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDenomsMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denoms_metadata/{denom}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DenomMetadata queries the client metadata of a given coin denomination.",
        "operationId": "Query_DenomMetadata",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "description": "denom is the coin denom to query the metadata for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDenomMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/denoms_metadata_by_query_string": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DenomMetadataByQueryString queries the client metadata of a given coin denomination.",
        "operationId": "Query_DenomMetadataByQueryString",
        "parameters": [
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query the metadata for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDenomMetadataByQueryStringResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params queries the parameters of x/bank module.",
        "operationId": "BankParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/send_enabled": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "SendEnabled queries for SendEnabled entries.\n\n This query only returns denominations that have specific SendEnabled settings.\n Any denomination that does not have a specific setting will use the default\n params.default_send_enabled, and will not be returned by this query.",
        "operationId": "Query_SendEnabled",
        "parameters": [
          {
            "name": "denoms",
            "in": "query",
            "description": "denoms is the specific denoms you want look up. Leave empty to get all entries.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySendEnabledResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/spendable_balances/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "SpendableBalances queries the spendable balance of all coins for a single\n account.\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_SpendableBalances",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query spendable balances for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySpendableBalancesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/spendable_balances/{address}/by_denom": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "SpendableBalanceByDenom queries the spendable balance of a single denom for\n a single account.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_SpendableBalanceByDenom",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the address to query balances for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query balances for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySpendableBalanceByDenomResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/supply": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "TotalSupply queries the total supply of all coins.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_TotalSupply",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryTotalSupplyResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/bank/v1beta1/supply/by_denom": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "SupplyOf queries the supply of a single coin.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_SupplyOf",
        "parameters": [
          {
            "name": "denom",
            "in": "query",
            "description": "denom is the coin denom to query balances for.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySupplyOfResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/node/v1beta1/config": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "Config queries for the operator configuration.",
        "operationId": "Service_Config",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/node/v1beta1/status": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "Status queries for the node status.",
        "operationId": "Service_Status",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatusResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/abci_query": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "ABCIQuery defines a query handler that supports ABCI queries directly to the\n application, bypassing Tendermint completely. The ABCI query must contain\n a valid and supported path, including app, custom, p2p, and store.",
        "operationId": "Service_ABCIQuery",
        "parameters": [
          {
            "name": "data",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "height",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "prove",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ABCIQueryResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/blocks/latest": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetLatestBlock returns the latest block.",
        "operationId": "Service_GetLatestBlock",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLatestBlockResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/blocks/{height}": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetBlockByHeight queries block for given height.",
        "operationId": "Service_GetBlockByHeight",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBlockByHeightResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/node_info": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetNodeInfo queries the current node info.",
        "operationId": "Service_GetNodeInfo",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetNodeInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/syncing": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetSyncing queries node syncing.",
        "operationId": "Service_GetSyncing",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetSyncingResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/validatorsets/latest": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetLatestValidatorSet queries latest validator-set.",
        "operationId": "Service_GetLatestValidatorSet",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLatestValidatorSetResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/base/tendermint/v1beta1/validatorsets/{height}": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetValidatorSetByHeight queries validator-set at a given height.",
        "operationId": "Service_GetValidatorSetByHeight",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetValidatorSetByHeightResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/circuit/v1/accounts": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Accounts returns multiple accounts permissions.",
        "operationId": "CircuitAccounts",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/circuit/v1/accounts/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Account returns account permissions.",
        "operationId": "CircuitAccount",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/circuit/v1/disable_list": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DisabledList returns a list of disabled message urls",
        "operationId": "Query_DisabledList",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DisabledListResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/consensus/v1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params queries the parameters of x/consensus module.",
        "operationId": "ConsensusParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/community_pool": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "CommunityPool queries the community pool coins.\n\n Deprecated: Prefer to use x/protocolpool module's CommunityPool rpc method.",
        "operationId": "Query_CommunityPool",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryCommunityPoolResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegatorAddress}/rewards": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DelegationTotalRewards queries the total rewards accrued by each\n validator.",
        "operationId": "Query_DelegationTotalRewards",
        "parameters": [
          {
            "name": "delegatorAddress",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegationTotalRewardsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegatorAddress}/rewards/{validatorAddress}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DelegationRewards queries the total rewards accrued by a delegation.",
        "operationId": "Query_DelegationRewards",
        "parameters": [
          {
            "name": "delegatorAddress",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validatorAddress",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegationRewardsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegatorAddress}/validators": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DelegatorValidators queries the validators of a delegator.",
        "operationId": "Query_DelegatorValidators",
        "parameters": [
          {
            "name": "delegatorAddress",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegatorValidatorsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/delegators/{delegatorAddress}/withdraw_address": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DelegatorWithdrawAddress queries withdraw address of a delegator.",
        "operationId": "Query_DelegatorWithdrawAddress",
        "parameters": [
          {
            "name": "delegatorAddress",
            "in": "path",
            "description": "delegator_address defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegatorWithdrawAddressResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params queries params of the distribution module.",
        "operationId": "DistributionParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validatorAddress}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ValidatorDistributionInfo queries validator commission and self-delegation rewards for validator",
        "operationId": "Query_ValidatorDistributionInfo",
        "parameters": [
          {
            "name": "validatorAddress",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorDistributionInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validatorAddress}/commission": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ValidatorCommission queries accumulated commission for a validator.",
        "operationId": "Query_ValidatorCommission",
        "parameters": [
          {
            "name": "validatorAddress",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorCommissionResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validatorAddress}/outstanding_rewards": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ValidatorOutstandingRewards queries rewards of a validator address.",
        "operationId": "Query_ValidatorOutstandingRewards",
        "parameters": [
          {
            "name": "validatorAddress",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorOutstandingRewardsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/distribution/v1beta1/validators/{validatorAddress}/slashes": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ValidatorSlashes queries slash events of a validator.",
        "operationId": "Query_ValidatorSlashes",
        "parameters": [
          {
            "name": "validatorAddress",
            "in": "path",
            "description": "validator_address defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startingHeight",
            "in": "query",
            "description": "starting_height defines the optional starting height to query the slashes.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "endingHeight",
            "in": "query",
            "description": "starting_height defines the optional ending height to query the slashes.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorSlashesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/epochs/v1beta1/current_epoch": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "CurrentEpoch provide current epoch of specified identifier",
        "operationId": "Query_CurrentEpoch",
        "parameters": [
          {
            "name": "identifier",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryCurrentEpochResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/epochs/v1beta1/epochs": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "EpochInfos provide running epochInfos",
        "operationId": "Query_EpochInfos",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryEpochsInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/evidence/v1beta1/evidence": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AllEvidence queries all evidence.",
        "operationId": "Query_AllEvidence",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAllEvidenceResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/evidence/v1beta1/evidence/{hash}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Evidence queries evidence based on evidence hash.",
        "operationId": "Query_Evidence",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "hash defines the evidence hash of the requested evidence.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "evidenceHash",
            "in": "query",
            "description": "evidence_hash defines the hash of the requested evidence. Deprecated: Use hash, a HEX encoded string, instead.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryEvidenceResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/feegrant/v1beta1/allowance/{granter}/{grantee}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Allowance returns granted allowance to the grantee by the granter.",
        "operationId": "Query_Allowance",
        "parameters": [
          {
            "name": "granter",
            "in": "path",
            "description": "granter is the address of the user granting an allowance of their funds.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "grantee",
            "in": "path",
            "description": "grantee is the address of the user being granted an allowance of another user's funds.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAllowanceResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/feegrant/v1beta1/allowances/{grantee}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Allowances returns all the grants for the given grantee address.",
        "operationId": "Query_Allowances",
        "parameters": [
          {
            "name": "grantee",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAllowancesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/feegrant/v1beta1/issued/{granter}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AllowancesByGranter returns all the grants given by an address",
        "operationId": "Query_AllowancesByGranter",
        "parameters": [
          {
            "name": "granter",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAllowancesByGranterResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/constitution": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Constitution queries the chain's constitution.",
        "operationId": "Query_Constitution",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryConstitutionResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params queries all parameters of the gov module.",
        "operationId": "Query_Params",
        "parameters": [
          {
            "name": "paramsType",
            "in": "query",
            "description": "params_type defines which parameters to query for, can be one of \"voting\", \"tallying\" or \"deposit\". Deprecated: all params are stored in Params.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/params/{msgUrl}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "MessageBasedParams queries the message specific governance params based on a msg url.",
        "operationId": "Query_MessageBasedParams",
        "parameters": [
          {
            "name": "msgUrl",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryMessageBasedParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Proposals queries all proposals based on given status.",
        "operationId": "GovV1Proposals",
        "parameters": [
          {
            "name": "proposalStatus",
            "in": "query",
            "description": "proposal_status defines the status of the proposals.",
            "schema": {
              "type": "integer",
              "format": "enum"
            }
          },
          {
            "name": "voter",
            "in": "query",
            "description": "voter defines the voter address for the proposals.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositor",
            "in": "query",
            "description": "depositor defines the deposit addresses from the proposals.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProposalsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposalId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Proposal queries proposal details based on ProposalID.",
        "operationId": "GovV1Proposal",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProposalResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposalId}/deposits": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Deposits queries all deposits of a single proposal.",
        "operationId": "GovV1Deposits",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDepositsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposalId}/deposits/{depositor}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Deposit queries single deposit information based on proposalID, depositAddr.",
        "operationId": "GovV1Deposit",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "depositor",
            "in": "path",
            "description": "depositor defines the deposit addresses from the proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDepositResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposalId}/tally": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "TallyResult queries the tally of a proposal vote.",
        "operationId": "GovV1TallyResult",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryTallyResultResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposalId}/vote_options": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ProposalVoteOptions queries the valid voting options for a proposal.",
        "operationId": "Query_ProposalVoteOptions",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProposalVoteOptionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposalId}/votes": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Votes queries votes of a given proposal.",
        "operationId": "GovV1Votes",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryVotesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/proposals/{proposalId}/votes/{voter}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Vote queries voted information based on proposalID, voterAddr.",
        "operationId": "GovV1Vote",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "voter",
            "in": "path",
            "description": "voter defines the voter address for the proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryVoteResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/params/{paramsType}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params queries all parameters of the gov module.",
        "operationId": "GovV1Beta1Params",
        "parameters": [
          {
            "name": "paramsType",
            "in": "path",
            "description": "params_type defines which parameters to query for, can be one of \"voting\", \"tallying\" or \"deposit\".",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Proposals queries all proposals based on given status.",
        "operationId": "Query_Proposals",
        "parameters": [
          {
            "name": "proposalStatus",
            "in": "query",
            "description": "proposal_status defines the status of the proposals.",
            "schema": {
              "type": "integer",
              "format": "enum"
            }
          },
          {
            "name": "voter",
            "in": "query",
            "description": "voter defines the voter address for the proposals.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "depositor",
            "in": "query",
            "description": "depositor defines the deposit addresses from the proposals.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProposalsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposalId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Proposal queries proposal details based on ProposalID.",
        "operationId": "Query_Proposal",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProposalResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposalId}/deposits": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Deposits queries all deposits of a single proposal.",
        "operationId": "Query_Deposits",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDepositsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposalId}/deposits/{depositor}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Deposit queries single deposit information based on proposalID, depositor address.",
        "operationId": "Query_Deposit",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "depositor",
            "in": "path",
            "description": "depositor defines the deposit addresses from the proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDepositResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposalId}/tally": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "TallyResult queries the tally of a proposal vote.",
        "operationId": "Query_TallyResult",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryTallyResultResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposalId}/votes": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Votes queries votes of a given proposal.",
        "operationId": "Query_Votes",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryVotesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1beta1/proposals/{proposalId}/votes/{voter}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Vote queries voted information based on proposalID, voterAddr.\n Due to how we handle state, this query would error for proposals that has already been finished.",
        "operationId": "Query_Vote",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id defines the unique id of the proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "voter",
            "in": "path",
            "description": "voter defines the voter address for the proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryVoteResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_info/{groupId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GroupInfo queries group info based on group id.",
        "operationId": "Query_GroupInfo",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group_id is the unique ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGroupInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_members/{groupId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GroupMembers queries members of a group by group id.",
        "operationId": "Query_GroupMembers",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group_id is the unique ID of the group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGroupMembersResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_policies_by_admin/{admin}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GroupPoliciesByAdmin queries group policies by admin address.",
        "operationId": "Query_GroupPoliciesByAdmin",
        "parameters": [
          {
            "name": "admin",
            "in": "path",
            "description": "admin is the admin address of the group policy.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGroupPoliciesByAdminResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_policies_by_group/{groupId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GroupPoliciesByGroup queries group policies by group id.",
        "operationId": "Query_GroupPoliciesByGroup",
        "parameters": [
          {
            "name": "groupId",
            "in": "path",
            "description": "group_id is the unique ID of the group policy's group.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGroupPoliciesByGroupResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/group_policy_info/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GroupPolicyInfo queries group policy info based on account address of group policy.",
        "operationId": "Query_GroupPolicyInfo",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the account address of the group policy.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGroupPolicyInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/groups": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Groups queries all groups in state.",
        "operationId": "Query_Groups",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGroupsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/groups_by_admin/{admin}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GroupsByAdmin queries groups by admin address.",
        "operationId": "Query_GroupsByAdmin",
        "parameters": [
          {
            "name": "admin",
            "in": "path",
            "description": "admin is the account address of a group's admin.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGroupsByAdminResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/groups_by_member/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "GroupsByMember queries groups by member address.",
        "operationId": "Query_GroupsByMember",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the group member address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryGroupsByMemberResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/proposal/{proposalId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Proposal queries a proposal based on proposal id.",
        "operationId": "GroupProposal",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id is the unique ID of a proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProposalResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/proposals/{proposalId}/tally": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "TallyResult returns the tally result of a proposal. If the proposal is\n still in voting period, then this query computes the current tally state,\n which might not be final. On the other hand, if the proposal is final,\n then it simply returns the `final_tally_result` state stored in the\n proposal itself.",
        "operationId": "GroupTallyResult",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id is the unique id of a proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryTallyResultResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/proposals_by_group_policy/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ProposalsByGroupPolicy queries proposals based on account address of group policy.",
        "operationId": "Query_ProposalsByGroupPolicy",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the account address of the group policy related to proposals.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryProposalsByGroupPolicyResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/vote_by_proposal_voter/{proposalId}/{voter}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "VoteByProposalVoter queries a vote by proposal id and voter.",
        "operationId": "Query_VoteByProposalVoter",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id is the unique ID of a proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "voter",
            "in": "path",
            "description": "voter is a proposal voter account address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryVoteByProposalVoterResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/votes_by_proposal/{proposalId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "VotesByProposal queries a vote by proposal id.",
        "operationId": "Query_VotesByProposal",
        "parameters": [
          {
            "name": "proposalId",
            "in": "path",
            "description": "proposal_id is the unique ID of a proposal.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryVotesByProposalResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/group/v1/votes_by_voter/{voter}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "VotesByVoter queries a vote by voter.",
        "operationId": "Query_VotesByVoter",
        "parameters": [
          {
            "name": "voter",
            "in": "path",
            "description": "voter is a proposal voter account address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryVotesByVoterResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/mint/v1beta1/annual_provisions": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AnnualProvisions current minting annual provisions value.",
        "operationId": "Query_AnnualProvisions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAnnualProvisionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/mint/v1beta1/inflation": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Inflation returns the current minting inflation value.",
        "operationId": "Query_Inflation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryInflationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/mint/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params returns the total set of minting parameters.",
        "operationId": "MintParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/balance": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "BalanceByQueryString queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721",
        "operationId": "Query_BalanceByQueryString",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "class_id associated with the nft",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "description": "owner is the owner address of the nft",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBalanceByQueryStringResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/balance/{owner}/{classId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Balance queries the number of NFTs of a given class owned by the owner, same as balanceOf in ERC721",
        "operationId": "NftBalance",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "description": "owner is the owner address of the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "classId",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryBalanceResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/class": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Class queries an NFT class based on its id",
        "operationId": "Query_ClassByQueryString",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "class_id associated with the nft",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryClassByQueryStringResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/classes": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Classes queries all NFT classes",
        "operationId": "Query_Classes",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryClassesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/classes/{classId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Class queries an NFT class based on its id",
        "operationId": "Query_Class",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryClassResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/nft": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "NFTByQueryString queries an NFT based on its class and id.",
        "operationId": "Query_NFTByQueryString",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "class_id associated with the nft",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "id is a unique identifier of the NFT",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryNFTByQueryStringResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/nfts": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "NFTs queries all NFTs of a given class or owner,choose at least one of the two, similar to tokenByIndex in\n ERC721Enumerable",
        "operationId": "Query_NFTs",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "class_id associated with the nft",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "description": "owner is the owner address of the nft",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryNFTsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/nfts/{classId}/{id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "NFT queries an NFT based on its class and id.",
        "operationId": "Query_NFT",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id is a unique identifier of the NFT",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryNFTResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/owner": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "OwnerByQueryString queries the owner of the NFT based on its class and id, same as ownerOf in ERC721",
        "operationId": "Query_OwnerByQueryString",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "class_id associated with the nft",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "query",
            "description": "id is a unique identifier of the NFT",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryOwnerByQueryStringResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/owner/{classId}/{id}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Owner queries the owner of the NFT based on its class and id, same as ownerOf in ERC721",
        "operationId": "Query_Owner",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "id is a unique identifier of the NFT",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryOwnerResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/supply": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "SupplyByQueryString queries the number of NFTs from the given class, same as totalSupply of ERC721.",
        "operationId": "Query_SupplyByQueryString",
        "parameters": [
          {
            "name": "classId",
            "in": "query",
            "description": "class_id associated with the nft",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySupplyByQueryStringResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/nft/v1beta1/supply/{classId}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Supply queries the number of NFTs from the given class, same as totalSupply of ERC721.",
        "operationId": "Query_Supply",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "class_id associated with the nft",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySupplyResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/params/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params queries a specific parameter of a module, given its subspace and\n key.",
        "operationId": "Params",
        "parameters": [
          {
            "name": "subspace",
            "in": "query",
            "description": "subspace defines the module to query the parameter for.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "key",
            "in": "query",
            "description": "key defines the key of the parameter in the subspace.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/params/v1beta1/subspaces": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Subspaces queries for all registered subspaces and all keys for a subspace.",
        "operationId": "Query_Subspaces",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySubspacesResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/protocolpool/v1/community_pool": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "CommunityPool queries the community pool coins.",
        "operationId": "Query_CommunityPool",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryCommunityPoolResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/protocolpool/v1/unclaimed_budget/{address}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "UnclaimedBudget queries the remaining budget left to be claimed and it gives overall budget allocation view.",
        "operationId": "Query_UnclaimedBudget",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "address is the recipient address to query unclaimed budget amount for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryUnclaimedBudgetResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/slashing/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params queries the parameters of slashing module",
        "operationId": "SlashingParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/slashing/v1beta1/signing_infos": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "SigningInfos queries signing info of all validators",
        "operationId": "Query_SigningInfos",
        "parameters": [
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySigningInfosResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/slashing/v1beta1/signing_infos/{consAddress}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "SigningInfo queries the signing info of given cons address",
        "operationId": "Query_SigningInfo",
        "parameters": [
          {
            "name": "consAddress",
            "in": "path",
            "description": "cons_address is the address to query signing info of",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuerySigningInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegations/{delegatorAddr}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DelegatorDelegations queries all delegations of a given delegator address.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_DelegatorDelegations",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegatorDelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegatorAddr}/redelegations": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Redelegations queries redelegations of given address.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_Redelegations",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "srcValidatorAddr",
            "in": "query",
            "description": "src_validator_addr defines the validator address to redelegate from.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "dstValidatorAddr",
            "in": "query",
            "description": "dst_validator_addr defines the validator address to redelegate to.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryRedelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegatorAddr}/unbonding_delegations": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DelegatorUnbondingDelegations queries all unbonding delegations of a given\n delegator address.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_DelegatorUnbondingDelegations",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegatorUnbondingDelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegatorAddr}/validators": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DelegatorValidators queries all validators info for given delegator\n address.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "StakingDelegatorValidators",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegatorValidatorsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/delegators/{delegatorAddr}/validators/{validatorAddr}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DelegatorValidator queries validator info for given delegator validator\n pair.",
        "operationId": "Query_DelegatorValidator",
        "parameters": [
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegatorValidatorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/historical_info/{height}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "HistoricalInfo queries the historical info for given height.",
        "operationId": "Query_HistoricalInfo",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "height defines at which height to query the historical info.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryHistoricalInfoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Parameters queries the staking parameters.",
        "operationId": "StakingParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/pool": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Pool queries the pool info.",
        "operationId": "Query_Pool",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryPoolResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Validators queries all validators that match the given status.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_Validators",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "status enables to query for validators matching a given status.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validatorAddr}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Validator queries validator info for given validator address.",
        "operationId": "Query_Validator",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validatorAddr}/delegations": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ValidatorDelegations queries delegate info for given validator.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_ValidatorDelegations",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorDelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validatorAddr}/delegations/{delegatorAddr}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Delegation queries delegate info for given validator delegator pair.",
        "operationId": "Query_Delegation",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDelegationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validatorAddr}/delegations/{delegatorAddr}/unbonding_delegation": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "UnbondingDelegation queries unbonding info for given validator delegator\n pair.",
        "operationId": "Query_UnbondingDelegation",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "delegatorAddr",
            "in": "path",
            "description": "delegator_addr defines the delegator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryUnbondingDelegationResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/staking/v1beta1/validators/{validatorAddr}/unbonding_delegations": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ValidatorUnbondingDelegations queries unbonding delegations of a validator.\n\n When called from another module, this query might consume a high amount of\n gas if the pagination field is incorrectly set.",
        "operationId": "Query_ValidatorUnbondingDelegations",
        "parameters": [
          {
            "name": "validatorAddr",
            "in": "path",
            "description": "validator_addr defines the validator address to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryValidatorUnbondingDelegationsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/decode": {
      "post": {
        "tags": [
          "Service"
        ],
        "description": "TxDecode decodes the transaction.",
        "operationId": "Service_TxDecode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TxDecodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxDecodeResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/decode/amino": {
      "post": {
        "tags": [
          "Service"
        ],
        "description": "TxDecodeAmino decodes an Amino transaction from encoded bytes to JSON.",
        "operationId": "Service_TxDecodeAmino",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TxDecodeAminoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxDecodeAminoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/encode": {
      "post": {
        "tags": [
          "Service"
        ],
        "description": "TxEncode encodes the transaction.",
        "operationId": "Service_TxEncode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TxEncodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxEncodeResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/encode/amino": {
      "post": {
        "tags": [
          "Service"
        ],
        "description": "TxEncodeAmino encodes an Amino transaction from JSON to encoded bytes.",
        "operationId": "Service_TxEncodeAmino",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TxEncodeAminoRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TxEncodeAminoResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/simulate": {
      "post": {
        "tags": [
          "Service"
        ],
        "description": "Simulate simulates executing a transaction for estimating gas usage.",
        "operationId": "Service_Simulate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/txs": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetTxsEvent fetches txs by event.",
        "operationId": "Service_GetTxsEvent",
        "parameters": [
          {
            "name": "events",
            "in": "query",
            "description": "events is the list of transaction event type. Deprecated: post v0.47.x use query instead, which should contain a valid events query.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "enum"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "page is the page number to query, starts at 1. If not provided, will default to first page.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "query defines the transaction event query that is proxied to Tendermint's TxSearch RPC method. The query must be valid.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTxsEventResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Service"
        ],
        "description": "BroadcastTx broadcast transaction.",
        "operationId": "Service_BroadcastTx",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BroadcastTxRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BroadcastTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/txs/block/{height}": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetBlockWithTxs fetches a block with decoded txs.",
        "operationId": "Service_GetBlockWithTxs",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "height is the height of the block to query.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "pagination.key",
            "in": "query",
            "description": "key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.",
            "schema": {
              "type": "string",
              "format": "bytes"
            }
          },
          {
            "name": "pagination.offset",
            "in": "query",
            "description": "offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.limit",
            "in": "query",
            "description": "limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.",
            "schema": {
              "type": "integer",
              "format": "uint64"
            }
          },
          {
            "name": "pagination.countTotal",
            "in": "query",
            "description": "count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "pagination.reverse",
            "in": "query",
            "description": "reverse is set to true if results are to be returned in the descending order.",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetBlockWithTxsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/tx/v1beta1/txs/{hash}": {
      "get": {
        "tags": [
          "Service"
        ],
        "description": "GetTx fetches a tx by hash.",
        "operationId": "Service_GetTx",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "hash is the tx hash to query, encoded as a hex string.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetTxResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/applied_plan/{name}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "AppliedPlan queries a previously applied upgrade plan by its name.",
        "operationId": "Query_AppliedPlan",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "name is the name of the applied plan to query for.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAppliedPlanResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/authority": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Returns the account with authority to conduct upgrades",
        "operationId": "Query_Authority",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryAuthorityResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/current_plan": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "CurrentPlan queries the current upgrade plan.",
        "operationId": "Query_CurrentPlan",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryCurrentPlanResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/module_versions": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "ModuleVersions queries the list of module versions from state.",
        "operationId": "Query_ModuleVersions",
        "parameters": [
          {
            "name": "moduleName",
            "in": "query",
            "description": "module_name is a field to query a specific module consensus version from state. Leaving this empty will fetch the full list of module versions from state",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryModuleVersionsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/upgrade/v1beta1/upgraded_consensus_state/{lastHeight}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "UpgradedConsensusState queries the consensus state that will serve\n as a trusted kernel for the next version of this chain. It will only be\n stored at the last height of this chain.\n UpgradedConsensusState RPC not supported with legacy querier\n This rpc is deprecated now that IBC has its own replacement\n (https://github.com/cosmos/ibc-go/blob/2c880a22e9f9cc75f62b527ca94aa75ce1106001/proto/ibc/core/client/v1/query.proto#L54)",
        "operationId": "Query_UpgradedConsensusState",
        "parameters": [
          {
            "name": "lastHeight",
            "in": "path",
            "description": "last height of the current chain must be sent in request as this is the height under which next consensus state is stored",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryUpgradedConsensusStateResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/tokenfactory.v1beta1/denoms/{denom}/authority_metadata": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DenomAuthorityMetadata defines a gRPC query method for fetching\n DenomAuthorityMetadata for a particular denom.",
        "operationId": "Query_DenomAuthorityMetadata",
        "parameters": [
          {
            "name": "denom",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDenomAuthorityMetadataResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/tokenfactory.v1beta1/denoms_from_creator/{creator}": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "DenomsFromCreator defines a gRPC query method for fetching all\n denominations created by a specific admin/creator.",
        "operationId": "Query_DenomsFromCreator",
        "parameters": [
          {
            "name": "creator",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryDenomsFromCreatorResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/tokenfactory.v1beta1/params": {
      "get": {
        "tags": [
          "Query"
        ],
        "description": "Params defines a gRPC query method that returns the tokenfactory module's\n parameters.",
        "operationId": "TokenfactoryParams",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryParamsResponse"
                }
              }
            }
          },
          "default": {
            "description": "Default error response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Status"
                }
              }
            }
          }
        }
      }
    },
    "/cosmos/gov/v1/params/{paramsType}": {
      "get": {
        "operationId": "GovV1Params"
      }
    }
  },
  "components": {
    "schemas": {
      "AddressBytesToStringResponse": {
        "type": "object",
        "properties": {
          "addressString": {
            "type": "string"
          }
        },
        "description": "AddressBytesToStringResponse is the response type for AddressString rpc method."
      },
      "AddressStringToBytesResponse": {
        "type": "object",
        "properties": {
          "addressBytes": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "AddressStringToBytesResponse is the response type for AddressBytes rpc method."
      },
      "BaseAccount": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "pubKey": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          },
          "accountNumber": {
            "type": "integer",
            "format": "uint64"
          },
          "sequence": {
            "type": "integer",
            "format": "uint64"
          }
        },
        "description": "BaseAccount defines a base account type. It contains all the necessary fields for basic account functionality. Any custom account type should extend this type for additional functionality (e.g. vesting)."
      },
      "Bech32PrefixResponse": {
        "type": "object",
        "properties": {
          "bech32Prefix": {
            "type": "string"
          }
        },
        "description": "Bech32PrefixResponse is the response type for Bech32Prefix rpc method."
      },
      "GoogleProtobufAny": {
        "type": "object",
        "properties": {
          "@type": {
            "type": "string",
            "description": "The type of the serialized message."
          }
        },
        "additionalProperties": true,
        "description": "Contains an arbitrary serialized message along with a @type that describes the type of the serialized message."
      },
      "PageResponse": {
        "type": "object",
        "properties": {
          "nextKey": {
            "type": "string",
            "description": "next_key is the key to be passed to PageRequest.key to query the next page most efficiently. It will be empty if there are no more results.",
            "format": "bytes"
          },
          "total": {
            "type": "integer",
            "description": "total is total number of results available if PageRequest.count_total was set, its value is undefined otherwise",
            "format": "uint64"
          }
        },
        "description": "PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.  message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }"
      },
      "Params": {
        "type": "object",
        "properties": {
          "denomCreationFee": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            }
          },
          "denomCreationGasConsume": {
            "type": "integer",
            "description": "if denom_creation_fee is an empty array, then this field is used to add more gas consumption to the base cost. https://github.com/CosmWasm/token-factory/issues/11",
            "format": "uint64"
          }
        },
        "description": "Params defines the parameters for the tokenfactory module."
      },
      "QueryAccountAddressByIDResponse": {
        "type": "object",
        "properties": {
          "accountAddress": {
            "type": "string"
          }
        },
        "description": "QueryAccountAddressByIDResponse is the response type for AccountAddressByID rpc method"
      },
      "QueryAccountInfoResponse": {
        "type": "object",
        "properties": {
          "info": {
            "$ref": "#/components/schemas/BaseAccount"
          }
        },
        "description": "QueryAccountInfoResponse is the Query/AccountInfo response type."
      },
      "QueryAccountResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          }
        },
        "description": "QueryAccountResponse is the response type for the Query/Account RPC method."
      },
      "QueryAccountsResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "accounts are the existing accounts"
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryAccountsResponse is the response type for the Query/Accounts RPC method."
      },
      "QueryModuleAccountByNameResponse": {
        "type": "object",
        "properties": {
          "account": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          }
        },
        "description": "QueryModuleAccountByNameResponse is the response type for the Query/ModuleAccountByName RPC method."
      },
      "QueryModuleAccountsResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            }
          }
        },
        "description": "QueryModuleAccountsResponse is the response type for the Query/ModuleAccounts RPC method."
      },
      "QueryParamsResponse": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/Params"
          }
        },
        "description": "QueryParamsResponse is the response type for the Query/Params RPC method."
      },
      "Status": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "description": "The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].",
            "format": "int32"
          },
          "message": {
            "type": "string",
            "description": "A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details] field, or localized by the client."
          },
          "details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "A list of messages that carry the error details.  There is a common set of message types for APIs to use."
          }
        },
        "description": "The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors)."
      },
      "Grant": {
        "type": "object",
        "properties": {
          "granter": {
            "type": "string",
            "description": "granter is the address of the user granting an allowance of their funds."
          },
          "grantee": {
            "type": "string",
            "description": "grantee is the address of the user being granted an allowance of another user's funds."
          },
          "allowance": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          }
        },
        "description": "Grant is stored in the KVStore to record a grant with full context"
      },
      "GrantAuthorization": {
        "type": "object",
        "properties": {
          "granter": {
            "type": "string"
          },
          "grantee": {
            "type": "string"
          },
          "authorization": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          },
          "expiration": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "GrantAuthorization extends a grant with both the addresses of the grantee and granter. It is used in genesis.proto and query.proto"
      },
      "QueryGranteeGrantsResponse": {
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantAuthorization"
            },
            "description": "grants is a list of grants granted to the grantee."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGranteeGrantsResponse is the response type for the Query/GranteeGrants RPC method."
      },
      "QueryGranterGrantsResponse": {
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GrantAuthorization"
            },
            "description": "grants is a list of grants granted by the granter."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGranterGrantsResponse is the response type for the Query/GranterGrants RPC method."
      },
      "QueryGrantsResponse": {
        "type": "object",
        "properties": {
          "grants": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Grant"
            },
            "description": "authorizations is a list of grants granted for grantee by granter."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGrantsResponse is the response type for the Query/Authorizations RPC method."
      },
      "Coin": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "description": "Coin defines a token with a denomination and an amount. NOTE: The amount field is an Int which implements the custom method signatures required by gogoproto."
      },
      "DenomOwner": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "address defines the address that owns a particular denomination."
          },
          "balance": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "description": "DenomOwner defines structure representing an account that owns or holds a particular denominated token. It contains the account address and account balance of the denominated token."
      },
      "DenomUnit": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string",
            "description": "denom represents the string name of the given denom unit (e.g uatom)."
          },
          "exponent": {
            "type": "integer",
            "description": "exponent represents power of 10 exponent that one must raise the base_denom to in order to equal the given DenomUnit's denom 1 denom = 10^exponent base_denom (e.g. with a base_denom of uatom, one can create a DenomUnit of 'atom' with exponent = 6, thus: 1 atom = 10^6 uatom).",
            "format": "uint32"
          },
          "aliases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "aliases is a list of string aliases for the given denom"
          }
        },
        "description": "DenomUnit represents a struct that describes a given denomination unit of the basic token."
      },
      "Metadata": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "denomUnits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DenomUnit"
            },
            "description": "denom_units represents the list of DenomUnit's for a given coin"
          },
          "base": {
            "type": "string",
            "description": "base represents the base denom (should be the DenomUnit with exponent = 0)."
          },
          "display": {
            "type": "string",
            "description": "display indicates the suggested denom that should be displayed in clients."
          },
          "name": {
            "type": "string",
            "description": "name defines the name of the token (eg: Cosmos Atom)"
          },
          "symbol": {
            "type": "string",
            "description": "symbol is the token symbol usually shown on exchanges (eg: ATOM). This can be the same as the display."
          },
          "uri": {
            "type": "string",
            "description": "URI to a document (on or off-chain) that contains additional information. Optional."
          },
          "uriHash": {
            "type": "string",
            "description": "URIHash is a sha256 hash of a document pointed by URI. It's used to verify that the document didn't change. Optional."
          }
        },
        "description": "Metadata represents a struct that describes a basic token."
      },
      "QueryAllBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": "balances is the balances of all the coins."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryAllBalancesResponse is the response type for the Query/AllBalances RPC method."
      },
      "QueryBalanceResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "amount is the number of all NFTs of a given class owned by the owner",
            "format": "uint64"
          }
        },
        "description": "QueryBalanceResponse is the response type for the Query/Balance RPC method"
      },
      "QueryDenomMetadataByQueryStringResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "description": "QueryDenomMetadataByQueryStringResponse is the response type for the Query/DenomMetadata RPC method. Identical with QueryDenomMetadataResponse but receives denom as query string in request."
      },
      "QueryDenomMetadataResponse": {
        "type": "object",
        "properties": {
          "metadata": {
            "$ref": "#/components/schemas/Metadata"
          }
        },
        "description": "QueryDenomMetadataResponse is the response type for the Query/DenomMetadata RPC method."
      },
      "QueryDenomOwnersByQueryResponse": {
        "type": "object",
        "properties": {
          "denomOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DenomOwner"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryDenomOwnersByQueryResponse defines the RPC response of a DenomOwnersByQuery RPC query."
      },
      "QueryDenomOwnersResponse": {
        "type": "object",
        "properties": {
          "denomOwners": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DenomOwner"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryDenomOwnersResponse defines the RPC response of a DenomOwners RPC query."
      },
      "QueryDenomsMetadataResponse": {
        "type": "object",
        "properties": {
          "metadatas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Metadata"
            },
            "description": "metadata provides the client information for all the registered tokens."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryDenomsMetadataResponse is the response type for the Query/DenomsMetadata RPC method."
      },
      "QuerySendEnabledResponse": {
        "type": "object",
        "properties": {
          "sendEnabled": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendEnabled"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QuerySendEnabledResponse defines the RPC response of a SendEnable query."
      },
      "QuerySpendableBalanceByDenomResponse": {
        "type": "object",
        "properties": {
          "balance": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "description": "QuerySpendableBalanceByDenomResponse defines the gRPC response structure for querying an account's spendable balance for a specific denom."
      },
      "QuerySpendableBalancesResponse": {
        "type": "object",
        "properties": {
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": "balances is the spendable balances of all the coins."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QuerySpendableBalancesResponse defines the gRPC response structure for querying an account's spendable balances."
      },
      "QuerySupplyOfResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "description": "QuerySupplyOfResponse is the response type for the Query/SupplyOf RPC method."
      },
      "QueryTotalSupplyResponse": {
        "type": "object",
        "properties": {
          "supply": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": "supply is the supply of the coins"
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryTotalSupplyResponse is the response type for the Query/TotalSupply RPC method"
      },
      "SendEnabled": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "description": "SendEnabled maps coin denom to a send_enabled status (whether a denom is sendable)."
      },
      "ConfigResponse": {
        "type": "object",
        "properties": {
          "minimumGasPrice": {
            "type": "string"
          },
          "pruningKeepRecent": {
            "type": "string"
          },
          "pruningInterval": {
            "type": "string"
          },
          "haltHeight": {
            "type": "integer",
            "format": "uint64"
          }
        },
        "description": "ConfigResponse defines the response structure for the Config gRPC query."
      },
      "StatusResponse": {
        "type": "object",
        "properties": {
          "earliestStoreHeight": {
            "type": "integer",
            "format": "uint64"
          },
          "height": {
            "type": "integer",
            "format": "uint64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "appHash": {
            "type": "string",
            "format": "bytes"
          },
          "validatorHash": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "StatusResponse defines the response structure for the status of a node."
      },
      "ABCIQueryResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "uint32"
          },
          "log": {
            "type": "string"
          },
          "info": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int64"
          },
          "key": {
            "type": "string",
            "format": "bytes"
          },
          "value": {
            "type": "string",
            "format": "bytes"
          },
          "height": {
            "type": "integer",
            "format": "int64"
          },
          "codespace": {
            "type": "string"
          },
          "proofOps": {
            "$ref": "#/components/schemas/ProofOps"
          }
        },
        "description": "ABCIQueryResponse defines the response structure for the ABCIQuery gRPC query. Note: This type is a duplicate of the ResponseQuery proto type defined in Tendermint."
      },
      "Block": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "data": {
            "$ref": "#/components/schemas/Data"
          },
          "evidence": {
            "$ref": "#/components/schemas/EvidenceList"
          },
          "lastCommit": {
            "$ref": "#/components/schemas/Commit"
          }
        },
        "description": "Block defines the structure of a block in the CometBFT blockchain."
      },
      "BlockID": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "format": "bytes"
          },
          "partSetHeader": {
            "$ref": "#/components/schemas/PartSetHeader"
          }
        },
        "description": "BlockID defines the unique ID of a block as its hash and its `PartSetHeader`."
      },
      "Commit": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "format": "int64"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "blockId": {
            "$ref": "#/components/schemas/BlockID"
          },
          "signatures": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CommitSig"
            }
          }
        },
        "description": "Commit contains the evidence that a block was committed by a set of validators."
      },
      "CommitSig": {
        "type": "object",
        "properties": {
          "blockIdFlag": {
            "type": "integer",
            "format": "enum"
          },
          "validatorAddress": {
            "type": "string",
            "format": "bytes"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "signature": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "CommitSig is a part of the Vote included in a Commit."
      },
      "Consensus": {
        "type": "object",
        "properties": {
          "block": {
            "type": "integer",
            "format": "uint64"
          },
          "app": {
            "type": "integer",
            "format": "uint64"
          }
        },
        "description": "Consensus captures the consensus rules for processing a block in the blockchain, including all blockchain data structures and the rules of the application's state transition machine."
      },
      "Data": {
        "type": "object",
        "properties": {
          "txs": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "bytes"
            },
            "description": "Txs that will be applied by state @ block.Height+1. NOTE: not all txs here are valid.  We're just agreeing on the order first. This means that block.AppHash does not include these txs."
          }
        },
        "description": "Data contains the set of transactions included in the block"
      },
      "DefaultNodeInfo": {
        "type": "object",
        "properties": {
          "protocolVersion": {
            "$ref": "#/components/schemas/ProtocolVersion"
          },
          "defaultNodeId": {
            "type": "string"
          },
          "listenAddr": {
            "type": "string"
          },
          "network": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "channels": {
            "type": "string",
            "format": "bytes"
          },
          "moniker": {
            "type": "string"
          },
          "other": {
            "$ref": "#/components/schemas/DefaultNodeInfoOther"
          }
        },
        "description": "DefaultNodeInfo is a basic node's information sent to other peers during the p2p handshake."
      },
      "DefaultNodeInfoOther": {
        "type": "object",
        "properties": {
          "txIndex": {
            "type": "string"
          },
          "rpcAddress": {
            "type": "string"
          }
        },
        "description": "DefaultNodeInfoOther is the misc. application specific data."
      },
      "DuplicateVoteEvidence": {
        "type": "object",
        "properties": {
          "voteA": {
            "$ref": "#/components/schemas/Vote"
          },
          "voteB": {
            "$ref": "#/components/schemas/Vote"
          },
          "totalVotingPower": {
            "type": "integer",
            "format": "int64"
          },
          "validatorPower": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "DuplicateVoteEvidence contains evidence of a validator signed two conflicting votes."
      },
      "Evidence": {
        "type": "object",
        "properties": {
          "duplicateVoteEvidence": {
            "$ref": "#/components/schemas/DuplicateVoteEvidence"
          },
          "lightClientAttackEvidence": {
            "$ref": "#/components/schemas/LightClientAttackEvidence"
          }
        },
        "description": "Evidence is a generic type for wrapping evidence of misbehavior by a validator."
      },
      "EvidenceList": {
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Evidence"
            }
          }
        },
        "description": "EvidenceList is a list of evidence."
      },
      "GetBlockByHeightResponse": {
        "type": "object",
        "properties": {
          "blockId": {
            "$ref": "#/components/schemas/BlockID"
          },
          "block": {
            "$ref": "#/components/schemas/Block"
          },
          "sdkBlock": {
            "$ref": "#/components/schemas/Block"
          }
        },
        "description": "GetBlockByHeightResponse is the response type for the Query/GetBlockByHeight RPC method."
      },
      "GetLatestBlockResponse": {
        "type": "object",
        "properties": {
          "blockId": {
            "$ref": "#/components/schemas/BlockID"
          },
          "block": {
            "$ref": "#/components/schemas/Block"
          },
          "sdkBlock": {
            "$ref": "#/components/schemas/Block"
          }
        },
        "description": "GetLatestBlockResponse is the response type for the Query/GetLatestBlock RPC method."
      },
      "GetLatestValidatorSetResponse": {
        "type": "object",
        "properties": {
          "blockHeight": {
            "type": "integer",
            "format": "int64"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validator"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "GetLatestValidatorSetResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
      },
      "GetNodeInfoResponse": {
        "type": "object",
        "properties": {
          "defaultNodeInfo": {
            "$ref": "#/components/schemas/DefaultNodeInfo"
          },
          "applicationVersion": {
            "$ref": "#/components/schemas/VersionInfo"
          }
        },
        "description": "GetNodeInfoResponse is the response type for the Query/GetNodeInfo RPC method."
      },
      "GetSyncingResponse": {
        "type": "object",
        "properties": {
          "syncing": {
            "type": "boolean"
          }
        },
        "description": "GetSyncingResponse is the response type for the Query/GetSyncing RPC method."
      },
      "GetValidatorSetByHeightResponse": {
        "type": "object",
        "properties": {
          "blockHeight": {
            "type": "integer",
            "format": "int64"
          },
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validator"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "GetValidatorSetByHeightResponse is the response type for the Query/GetValidatorSetByHeight RPC method."
      },
      "Header": {
        "type": "object",
        "properties": {
          "version": {
            "$ref": "#/components/schemas/Consensus"
          },
          "chainId": {
            "type": "string"
          },
          "height": {
            "type": "integer",
            "format": "int64"
          },
          "time": {
            "type": "string",
            "format": "date-time"
          },
          "lastBlockId": {
            "$ref": "#/components/schemas/BlockID"
          },
          "lastCommitHash": {
            "type": "string",
            "description": "hashes of block data",
            "format": "bytes"
          },
          "dataHash": {
            "type": "string",
            "format": "bytes"
          },
          "validatorsHash": {
            "type": "string",
            "description": "hashes from the app output from the prev block",
            "format": "bytes"
          },
          "nextValidatorsHash": {
            "type": "string",
            "format": "bytes"
          },
          "consensusHash": {
            "type": "string",
            "format": "bytes"
          },
          "appHash": {
            "type": "string",
            "format": "bytes"
          },
          "lastResultsHash": {
            "type": "string",
            "format": "bytes"
          },
          "evidenceHash": {
            "type": "string",
            "description": "consensus info",
            "format": "bytes"
          },
          "proposerAddress": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "Header defines the structure of a block header."
      },
      "LightBlock": {
        "type": "object",
        "properties": {
          "signedHeader": {
            "$ref": "#/components/schemas/SignedHeader"
          },
          "validatorSet": {
            "$ref": "#/components/schemas/ValidatorSet"
          }
        },
        "description": "LightBlock is a combination of SignedHeader and ValidatorSet. It is used by light clients."
      },
      "LightClientAttackEvidence": {
        "type": "object",
        "properties": {
          "conflictingBlock": {
            "$ref": "#/components/schemas/LightBlock"
          },
          "commonHeight": {
            "type": "integer",
            "format": "int64"
          },
          "byzantineValidators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validator"
            }
          },
          "totalVotingPower": {
            "type": "integer",
            "format": "int64"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "description": "LightClientAttackEvidence contains evidence of a set of validators attempting to mislead a light client."
      },
      "Module": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "module path"
          },
          "version": {
            "type": "string",
            "description": "module version"
          },
          "sum": {
            "type": "string",
            "description": "checksum"
          }
        },
        "description": "Module is the type for VersionInfo"
      },
      "PartSetHeader": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "format": "uint32"
          },
          "hash": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "Header of the parts set for a block."
      },
      "ProofOp": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "key": {
            "type": "string",
            "format": "bytes"
          },
          "data": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "ProofOp defines an operation used for calculating Merkle root The data could be arbitrary format, providing necessary data for example neighbouring node hash"
      },
      "ProofOps": {
        "type": "object",
        "properties": {
          "ops": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProofOp"
            }
          }
        },
        "description": "ProofOps is Merkle proof defined by the list of ProofOps. Note: This type is a duplicate of the ProofOps proto type defined in Tendermint."
      },
      "ProtocolVersion": {
        "type": "object",
        "properties": {
          "p2p": {
            "type": "integer",
            "format": "uint64"
          },
          "block": {
            "type": "integer",
            "format": "uint64"
          },
          "app": {
            "type": "integer",
            "format": "uint64"
          }
        },
        "description": "ProtocolVersion represents the current p2p protocol version."
      },
      "SignedHeader": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "commit": {
            "$ref": "#/components/schemas/Commit"
          }
        },
        "description": "SignedHeader contains a Header(H) and Commit(H+1) with signatures of validators who signed it."
      },
      "Validator": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "format": "bytes"
          },
          "pubKey": {
            "$ref": "#/components/schemas/PublicKey"
          },
          "votingPower": {
            "type": "integer",
            "format": "int64"
          },
          "proposerPriority": {
            "type": "integer",
            "format": "int64"
          },
          "pubKeyBytes": {
            "type": "string",
            "format": "bytes"
          },
          "pubKeyType": {
            "type": "string"
          }
        },
        "description": "Validator represents a node participating in the consensus protocol."
      },
      "ValidatorSet": {
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validator"
            }
          },
          "proposer": {
            "$ref": "#/components/schemas/Validator"
          },
          "totalVotingPower": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "ValidatorSet defines a set of validators."
      },
      "VersionInfo": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "appName": {
            "type": "string"
          },
          "version": {
            "type": "string"
          },
          "gitCommit": {
            "type": "string"
          },
          "buildTags": {
            "type": "string"
          },
          "goVersion": {
            "type": "string"
          },
          "buildDeps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Module"
            }
          },
          "cosmosSdkVersion": {
            "type": "string"
          }
        },
        "description": "VersionInfo is the type for the GetNodeInfoResponse message."
      },
      "Vote": {
        "type": "object",
        "properties": {
          "type": {
            "type": "integer",
            "format": "enum"
          },
          "height": {
            "type": "integer",
            "format": "int64"
          },
          "round": {
            "type": "integer",
            "format": "int32"
          },
          "blockId": {
            "$ref": "#/components/schemas/BlockID"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "validatorAddress": {
            "type": "string",
            "format": "bytes"
          },
          "validatorIndex": {
            "type": "integer",
            "format": "int32"
          },
          "signature": {
            "type": "string",
            "description": "Vote signature by the validator if they participated in consensus for the associated block.",
            "format": "bytes"
          },
          "extension": {
            "type": "string",
            "description": "Vote extension provided by the application. Only valid for precommit messages.",
            "format": "bytes"
          },
          "extensionSignature": {
            "type": "string",
            "description": "Vote extension signature by the validator if they participated in consensus for the associated block. Only valid for precommit messages.",
            "format": "bytes"
          }
        },
        "description": "Vote represents a prevote or precommit vote from validators for consensus."
      },
      "AccountResponse": {
        "type": "object",
        "properties": {
          "permission": {
            "$ref": "#/components/schemas/Permissions"
          }
        },
        "description": "AccountResponse is the response type for the Query/Account RPC method."
      },
      "AccountsResponse": {
        "type": "object",
        "properties": {
          "accounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GenesisAccountPermissions"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "AccountsResponse is the response type for the Query/Accounts RPC method."
      },
      "DisabledListResponse": {
        "type": "object",
        "properties": {
          "disabledList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "DisabledListResponse is the response type for the Query/DisabledList RPC method."
      },
      "GenesisAccountPermissions": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "permissions": {
            "$ref": "#/components/schemas/Permissions"
          }
        },
        "description": "GenesisAccountPermissions is the account permissions for the circuit breaker in genesis"
      },
      "Permissions": {
        "type": "object",
        "properties": {
          "level": {
            "type": "integer",
            "description": "level is the level of permissions granted to this account.",
            "format": "enum"
          },
          "limitTypeUrls": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "limit_type_urls is used with LEVEL_SOME_MSGS to limit the lists of Msg type URLs that the account can trip. It is an error to use limit_type_urls with a level other than LEVEL_SOME_MSGS."
          }
        },
        "description": "Permissions are the permissions that an account has to trip or reset the circuit breaker."
      },
      "ABCIParams": {
        "type": "object",
        "properties": {
          "voteExtensionsEnableHeight": {
            "type": "integer",
            "description": "vote_extensions_enable_height has been deprecated. Instead, use FeatureParams.vote_extensions_enable_height.",
            "format": "int64"
          }
        },
        "description": "ABCIParams is deprecated and its contents moved to FeatureParams"
      },
      "BlockParams": {
        "type": "object",
        "properties": {
          "maxBytes": {
            "type": "integer",
            "description": "Maximum size of a block, in bytes. Must be greater or equal to -1 and cannot be greater than the hard-coded maximum block size, which is 100MB. If set to -1, the limit is the hard-coded maximum block size.",
            "format": "int64"
          },
          "maxGas": {
            "type": "integer",
            "description": "Maximum gas wanted by transactions included in a block. Must be greater or equal to -1. If set to -1, no limit is enforced.",
            "format": "int64"
          }
        },
        "description": "BlockParams define limits on the block size and gas."
      },
      "ConsensusParams": {
        "type": "object",
        "properties": {
          "block": {
            "$ref": "#/components/schemas/BlockParams"
          },
          "evidence": {
            "$ref": "#/components/schemas/EvidenceParams"
          },
          "validator": {
            "$ref": "#/components/schemas/ValidatorParams"
          },
          "version": {
            "$ref": "#/components/schemas/VersionParams"
          },
          "abci": {
            "$ref": "#/components/schemas/ABCIParams"
          },
          "synchrony": {
            "$ref": "#/components/schemas/SynchronyParams"
          },
          "feature": {
            "$ref": "#/components/schemas/FeatureParams"
          }
        },
        "description": "ConsensusParams contains consensus critical parameters that determine the validity of blocks."
      },
      "Duration": {
        "type": "object",
        "properties": {
          "seconds": {
            "type": "integer",
            "description": "Signed seconds of the span of time. Must be from -315,576,000,000 to +315,576,000,000 inclusive. Note: these bounds are computed from: 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years",
            "format": "int64"
          },
          "nanos": {
            "type": "integer",
            "description": "Signed fractions of a second at nanosecond resolution of the span of time. Durations less than one second are represented with a 0 `seconds` field and a positive or negative `nanos` field. For durations of one second or more, a non-zero value for the `nanos` field must be of the same sign as the `seconds` field. Must be from -999,999,999 to +999,999,999 inclusive.",
            "format": "int32"
          }
        },
        "description": "A Duration represents a signed, fixed-length span of time represented as a count of seconds and fractions of seconds at nanosecond resolution. It is independent of any calendar and concepts like \"day\" or \"month\". It is related to Timestamp in that the difference between two Timestamp values is a Duration and it can be added or subtracted from a Timestamp. Range is approximately +-10,000 years. # Examples Example 1: Compute Duration from two Timestamps in pseudo code.     Timestamp start = ...;     Timestamp end = ...;     Duration duration = ...;     duration.seconds = end.seconds - start.seconds;     duration.nanos = end.nanos - start.nanos;     if (duration.seconds < 0 && duration.nanos > 0) {       duration.seconds += 1;       duration.nanos -= 1000000000;     } else if (duration.seconds > 0 && duration.nanos < 0) {       duration.seconds -= 1;       duration.nanos += 1000000000;     } Example 2: Compute Timestamp from Timestamp + Duration in pseudo code.     Timestamp start = ...;     Duration duration = ...;     Timestamp end = ...;     end.seconds = start.seconds + duration.seconds;     end.nanos = start.nanos + duration.nanos;     if (end.nanos < 0) {       end.seconds -= 1;       end.nanos += 1000000000;     } else if (end.nanos >= 1000000000) {       end.seconds += 1;       end.nanos -= 1000000000;     } Example 3: Compute Duration from datetime.timedelta in Python.     td = datetime.timedelta(days=3, minutes=10)     duration = Duration()     duration.FromTimedelta(td) # JSON Mapping In JSON format, the Duration type is encoded as a string rather than an object, where the string ends in the suffix \"s\" (indicating seconds) and is preceded by the number of seconds, with nanoseconds expressed as fractional seconds. For example, 3 seconds with 0 nanoseconds should be encoded in JSON format as \"3s\", while 3 seconds and 1 nanosecond should be expressed in JSON format as \"3.000000001s\", and 3 seconds and 1 microsecond should be expressed in JSON format as \"3.000001s\"."
      },
      "EvidenceParams": {
        "type": "object",
        "properties": {
          "maxAgeNumBlocks": {
            "type": "integer",
            "description": "Maximum age of evidence, in blocks. The recommended formula for calculating it is max_age_duration / {average block time}.",
            "format": "int64"
          },
          "maxAgeDuration": {
            "$ref": "#/components/schemas/Duration"
          },
          "maxBytes": {
            "type": "integer",
            "description": "Maximum size in bytes of evidence allowed to be included in a block. It should fall comfortably under the maximum size of a block.",
            "format": "int64"
          }
        },
        "description": "EvidenceParams determine the validity of evidences of Byzantine behavior."
      },
      "FeatureParams": {
        "type": "object",
        "properties": {
          "voteExtensionsEnableHeight": {
            "$ref": "#/components/schemas/Int64Value"
          },
          "pbtsEnableHeight": {
            "$ref": "#/components/schemas/Int64Value"
          }
        },
        "description": "FeatureParams configure the height from which features of CometBFT are enabled."
      },
      "Int64Value": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "description": "The int64 value.",
            "format": "int64"
          }
        },
        "description": "Wrapper message for `int64`. The JSON representation for `Int64Value` is JSON string."
      },
      "SynchronyParams": {
        "type": "object",
        "properties": {
          "precision": {
            "$ref": "#/components/schemas/Duration"
          },
          "messageDelay": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "description": "SynchronyParams determine the validity of block timestamps. These parameters are part of the Proposer-Based Timestamps (PBTS) algorithm. For more information on the relationship of the synchrony parameters to block timestamps validity, refer to the PBTS specification: https://github.com/tendermint/spec/blob/master/spec/consensus/proposer-based-timestamp/README.md"
      },
      "ValidatorParams": {
        "type": "object",
        "properties": {
          "pubKeyTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "ValidatorParams restrict the public key types validators can use. NOTE: uses ABCI public keys naming, not Amino names."
      },
      "VersionParams": {
        "type": "object",
        "properties": {
          "app": {
            "type": "integer",
            "description": "The ABCI application version. It was named app_version in CometBFT 0.34.",
            "format": "uint64"
          }
        },
        "description": "VersionParams contain the version of specific components of CometBFT."
      },
      "DecCoin": {
        "type": "object",
        "properties": {
          "denom": {
            "type": "string"
          },
          "amount": {
            "type": "string"
          }
        },
        "description": "DecCoin defines a token with a denomination and a decimal amount. NOTE: The amount field is an Dec which implements the custom method signatures required by gogoproto."
      },
      "DelegationDelegatorReward": {
        "type": "object",
        "properties": {
          "validatorAddress": {
            "type": "string"
          },
          "reward": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecCoin"
            }
          }
        },
        "description": "DelegationDelegatorReward represents the properties of a delegator's delegation reward."
      },
      "QueryCommunityPoolResponse": {
        "type": "object",
        "properties": {
          "pool": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecCoin"
            },
            "description": "pool defines community pool's coins."
          }
        },
        "description": "QueryCommunityPoolResponse is the response type for the Query/CommunityPool RPC method."
      },
      "QueryDelegationRewardsResponse": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecCoin"
            },
            "description": "rewards defines the rewards accrued by a delegation."
          }
        },
        "description": "QueryDelegationRewardsResponse is the response type for the Query/DelegationRewards RPC method."
      },
      "QueryDelegationTotalRewardsResponse": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegationDelegatorReward"
            },
            "description": "rewards defines all the rewards accrued by a delegator."
          },
          "total": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecCoin"
            },
            "description": "total defines the sum of all the rewards."
          }
        },
        "description": "QueryDelegationTotalRewardsResponse is the response type for the Query/DelegationTotalRewards RPC method."
      },
      "QueryDelegatorValidatorsResponse": {
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validator"
            },
            "description": "validators defines the validators' info of a delegator."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryDelegatorValidatorsResponse is response type for the Query/DelegatorValidators RPC method."
      },
      "QueryDelegatorWithdrawAddressResponse": {
        "type": "object",
        "properties": {
          "withdrawAddress": {
            "type": "string",
            "description": "withdraw_address defines the delegator address to query for."
          }
        },
        "description": "QueryDelegatorWithdrawAddressResponse is the response type for the Query/DelegatorWithdrawAddress RPC method."
      },
      "QueryValidatorCommissionResponse": {
        "type": "object",
        "properties": {
          "commission": {
            "$ref": "#/components/schemas/ValidatorAccumulatedCommission"
          }
        },
        "description": "QueryValidatorCommissionResponse is the response type for the Query/ValidatorCommission RPC method"
      },
      "QueryValidatorDistributionInfoResponse": {
        "type": "object",
        "properties": {
          "operatorAddress": {
            "type": "string",
            "description": "operator_address defines the validator operator address."
          },
          "selfBondRewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecCoin"
            },
            "description": "self_bond_rewards defines the self delegations rewards."
          },
          "commission": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecCoin"
            },
            "description": "commission defines the commission the validator received."
          }
        },
        "description": "QueryValidatorDistributionInfoResponse is the response type for the Query/ValidatorDistributionInfo RPC method."
      },
      "QueryValidatorOutstandingRewardsResponse": {
        "type": "object",
        "properties": {
          "rewards": {
            "$ref": "#/components/schemas/ValidatorOutstandingRewards"
          }
        },
        "description": "QueryValidatorOutstandingRewardsResponse is the response type for the Query/ValidatorOutstandingRewards RPC method."
      },
      "QueryValidatorSlashesResponse": {
        "type": "object",
        "properties": {
          "slashes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorSlashEvent"
            },
            "description": "slashes defines the slashes the validator received."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryValidatorSlashesResponse is the response type for the Query/ValidatorSlashes RPC method."
      },
      "ValidatorAccumulatedCommission": {
        "type": "object",
        "properties": {
          "commission": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecCoin"
            }
          }
        },
        "description": "ValidatorAccumulatedCommission represents accumulated commission for a validator kept as a running counter, can be withdrawn at any time."
      },
      "ValidatorOutstandingRewards": {
        "type": "object",
        "properties": {
          "rewards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DecCoin"
            }
          }
        },
        "description": "ValidatorOutstandingRewards represents outstanding (un-withdrawn) rewards for a validator inexpensive to track, allows simple sanity checks."
      },
      "ValidatorSlashEvent": {
        "type": "object",
        "properties": {
          "validatorPeriod": {
            "type": "integer",
            "format": "uint64"
          },
          "fraction": {
            "type": "string"
          }
        },
        "description": "ValidatorSlashEvent represents a validator slash event. Height is implicit within the store key. This is needed to calculate appropriate amount of staking tokens for delegations which are withdrawn after a slash has occurred."
      },
      "EpochInfo": {
        "type": "object",
        "properties": {
          "identifier": {
            "type": "string",
            "description": "identifier is a unique reference to this particular timer."
          },
          "startTime": {
            "type": "string",
            "description": "start_time is the time at which the timer first ever ticks. If start_time is in the future, the epoch will not begin until the start time.",
            "format": "date-time"
          },
          "duration": {
            "$ref": "#/components/schemas/Duration"
          },
          "currentEpoch": {
            "type": "integer",
            "description": "current_epoch is the current epoch number, or in other words, how many times has the timer 'ticked'. The first tick (current_epoch=1) is defined as the first block whose blocktime is greater than the EpochInfo start_time.",
            "format": "int64"
          },
          "currentEpochStartTime": {
            "type": "string",
            "description": "current_epoch_start_time describes the start time of the current timer interval. The interval is (current_epoch_start_time, current_epoch_start_time + duration] When the timer ticks, this is set to current_epoch_start_time = last_epoch_start_time + duration only one timer tick for a given identifier can occur per block. NOTE! The current_epoch_start_time may diverge significantly from the wall-clock time the epoch began at. Wall-clock time of epoch start may be >> current_epoch_start_time. Suppose current_epoch_start_time = 10, duration = 5. Suppose the chain goes offline at t=14, and comes back online at t=30, and produces blocks at every successive time. (t=31, 32, etc.) * The t=30 block will start the epoch for (10, 15] * The t=31 block will start the epoch for (15, 20] * The t=32 block will start the epoch for (20, 25] * The t=33 block will start the epoch for (25, 30] * The t=34 block will start the epoch for (30, 35] * The **t=36** block will start the epoch for (35, 40]",
            "format": "date-time"
          },
          "epochCountingStarted": {
            "type": "boolean",
            "description": "epoch_counting_started is a boolean, that indicates whether this epoch timer has began yet."
          },
          "currentEpochStartHeight": {
            "type": "integer",
            "description": "current_epoch_start_height is the block height at which the current epoch started. (The block height at which the timer last ticked)",
            "format": "int64"
          }
        },
        "description": "EpochInfo is a struct that describes the data going into a timer defined by the x/epochs module."
      },
      "QueryCurrentEpochResponse": {
        "type": "object",
        "properties": {
          "currentEpoch": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "QueryEpochsInfoResponse": {
        "type": "object",
        "properties": {
          "epochs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EpochInfo"
            }
          }
        }
      },
      "QueryAllEvidenceResponse": {
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "evidence returns all evidences."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryAllEvidenceResponse is the response type for the Query/AllEvidence RPC method."
      },
      "QueryEvidenceResponse": {
        "type": "object",
        "properties": {
          "evidence": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          }
        },
        "description": "QueryEvidenceResponse is the response type for the Query/Evidence RPC method."
      },
      "QueryAllowanceResponse": {
        "type": "object",
        "properties": {
          "allowance": {
            "$ref": "#/components/schemas/Grant"
          }
        },
        "description": "QueryAllowanceResponse is the response type for the Query/Allowance RPC method."
      },
      "QueryAllowancesByGranterResponse": {
        "type": "object",
        "properties": {
          "allowances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Grant"
            },
            "description": "allowances that have been issued by the granter."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryAllowancesByGranterResponse is the response type for the Query/AllowancesByGranter RPC method."
      },
      "QueryAllowancesResponse": {
        "type": "object",
        "properties": {
          "allowances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Grant"
            },
            "description": "allowances are allowance's granted for grantee by granter."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryAllowancesResponse is the response type for the Query/Allowances RPC method."
      },
      "Deposit": {
        "type": "object",
        "properties": {
          "proposalId": {
            "type": "integer",
            "description": "proposal_id defines the unique id of the proposal.",
            "format": "uint64"
          },
          "depositor": {
            "type": "string",
            "description": "depositor defines the deposit addresses from the proposals."
          },
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": "amount to be deposited by depositor."
          }
        },
        "description": "Deposit defines an amount deposited by an account address to an active proposal."
      },
      "DepositParams": {
        "type": "object",
        "properties": {
          "minDeposit": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": "Minimum deposit for a proposal to enter voting period."
          },
          "maxDepositPeriod": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "description": "DepositParams defines the params for deposits on governance proposals."
      },
      "MessageBasedParams": {
        "type": "object",
        "properties": {
          "votingPeriod": {
            "$ref": "#/components/schemas/Duration"
          },
          "quorum": {
            "type": "string",
            "description": "Minimum percentage of total stake needed to vote for a result to be considered valid."
          },
          "yesQuorum": {
            "type": "string",
            "description": "yes_quorum defines the minimum percentage of Yes votes in quorum for proposal to pass. If zero then the yes_quorum is disabled."
          },
          "threshold": {
            "type": "string",
            "description": "Minimum proportion of Yes votes for proposal to pass."
          },
          "vetoThreshold": {
            "type": "string",
            "description": "Minimum value of Veto votes to Total votes ratio for proposal to be vetoed."
          }
        },
        "description": "MessageBasedParams defines the parameters of specific messages in a proposal. It is used to define the parameters of a proposal that is based on a specific message. Once a message has message based params, it only supports a standard proposal type."
      },
      "Proposal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "id is the unique id of the proposal.",
            "format": "uint64"
          },
          "groupPolicyAddress": {
            "type": "string",
            "description": "group_policy_address is the account address of group policy."
          },
          "metadata": {
            "type": "string",
            "description": "metadata is any arbitrary metadata attached to the proposal. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#proposal-4"
          },
          "proposers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "proposers are the account addresses of the proposers."
          },
          "submitTime": {
            "type": "string",
            "description": "submit_time is a timestamp specifying when a proposal was submitted.",
            "format": "date-time"
          },
          "groupVersion": {
            "type": "integer",
            "description": "group_version tracks the version of the group at proposal submission. This field is here for informational purposes only.",
            "format": "uint64"
          },
          "groupPolicyVersion": {
            "type": "integer",
            "description": "group_policy_version tracks the version of the group policy at proposal submission. When a decision policy is changed, existing proposals from previous policy versions will become invalid with the `ABORTED` status. This field is here for informational purposes only.",
            "format": "uint64"
          },
          "status": {
            "type": "integer",
            "description": "status represents the high level position in the life cycle of the proposal. Initial value is Submitted.",
            "format": "enum"
          },
          "finalTallyResult": {
            "$ref": "#/components/schemas/TallyResult"
          },
          "votingPeriodEnd": {
            "type": "string",
            "description": "voting_period_end is the timestamp before which voting must be done. Unless a successful MsgExec is called before (to execute a proposal whose tally is successful before the voting period ends), tallying will be done at this point, and the `final_tally_result`and `status` fields will be accordingly updated.",
            "format": "date-time"
          },
          "executorResult": {
            "type": "integer",
            "description": "executor_result is the final result of the proposal execution. Initial value is NotRun.",
            "format": "enum"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "messages is a list of `sdk.Msg`s that will be executed if the proposal passes."
          },
          "title": {
            "type": "string",
            "description": "title is the title of the proposal"
          },
          "summary": {
            "type": "string",
            "description": "summary is a short summary of the proposal"
          }
        },
        "description": "Proposal defines a group proposal. Any member of a group can submit a proposal for a group policy to decide upon. A proposal consists of a set of `sdk.Msg`s that will be executed if the proposal passes as well as some optional metadata associated with the proposal."
      },
      "ProposalVoteOptions": {
        "type": "object",
        "properties": {
          "optionOne": {
            "type": "string",
            "description": "option_one is the first option of the proposal"
          },
          "optionTwo": {
            "type": "string",
            "description": "option_two is the second option of the proposal"
          },
          "optionThree": {
            "type": "string",
            "description": "option_three is the third option of the proposal"
          },
          "optionFour": {
            "type": "string",
            "description": "option_four is the fourth option of the proposal"
          },
          "optionSpam": {
            "type": "string",
            "description": "option_spam is always present for all proposals."
          }
        },
        "description": "ProposalVoteOptions defines the stringified vote options for proposals. This allows to support multiple choice options for a given proposal."
      },
      "QueryConstitutionResponse": {
        "type": "object",
        "properties": {
          "constitution": {
            "type": "string"
          }
        },
        "description": "QueryConstitutionResponse is the response type for the Query/Constitution RPC method"
      },
      "QueryDepositResponse": {
        "type": "object",
        "properties": {
          "deposit": {
            "$ref": "#/components/schemas/Deposit"
          }
        },
        "description": "QueryDepositResponse is the response type for the Query/Deposit RPC method."
      },
      "QueryDepositsResponse": {
        "type": "object",
        "properties": {
          "deposits": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Deposit"
            },
            "description": "deposits defines the requested deposits."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryDepositsResponse is the response type for the Query/Deposits RPC method."
      },
      "QueryMessageBasedParamsResponse": {
        "type": "object",
        "properties": {
          "params": {
            "$ref": "#/components/schemas/MessageBasedParams"
          }
        },
        "description": "QueryMessageBasedParamsResponse is the response for the Query/MessageBasedParams RPC method."
      },
      "QueryProposalResponse": {
        "type": "object",
        "properties": {
          "proposal": {
            "$ref": "#/components/schemas/Proposal"
          }
        },
        "description": "QueryProposalResponse is the Query/Proposal response type."
      },
      "QueryProposalVoteOptionsResponse": {
        "type": "object",
        "properties": {
          "voteOptions": {
            "$ref": "#/components/schemas/ProposalVoteOptions"
          }
        },
        "description": "QueryProposalVoteOptionsResponse is the response type for the Query/ProposalVoteOptions RPC method."
      },
      "QueryProposalsResponse": {
        "type": "object",
        "properties": {
          "proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Proposal"
            },
            "description": "proposals defines all the requested governance proposals."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryProposalsResponse is the response type for the Query/Proposals RPC method."
      },
      "QueryTallyResultResponse": {
        "type": "object",
        "properties": {
          "tally": {
            "$ref": "#/components/schemas/TallyResult"
          }
        },
        "description": "QueryTallyResultResponse is the Query/TallyResult response type."
      },
      "QueryVoteResponse": {
        "type": "object",
        "properties": {
          "vote": {
            "$ref": "#/components/schemas/Vote"
          }
        },
        "description": "QueryVoteResponse is the response type for the Query/Vote RPC method."
      },
      "QueryVotesResponse": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vote"
            },
            "description": "votes defines the queried votes."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryVotesResponse is the response type for the Query/Votes RPC method."
      },
      "TallyParams": {
        "type": "object",
        "properties": {
          "quorum": {
            "type": "string",
            "description": "Minimum percentage of total stake needed to vote for a result to be considered valid.",
            "format": "bytes"
          },
          "threshold": {
            "type": "string",
            "description": "Minimum proportion of Yes votes for proposal to pass. Default value: 0.5.",
            "format": "bytes"
          },
          "vetoThreshold": {
            "type": "string",
            "description": "Minimum value of Veto votes to Total votes ratio for proposal to be vetoed. Default value: 1/3.",
            "format": "bytes"
          }
        },
        "description": "TallyParams defines the params for tallying votes on governance proposals."
      },
      "TallyResult": {
        "type": "object",
        "properties": {
          "yesCount": {
            "type": "string",
            "description": "yes_count is the weighted sum of yes votes."
          },
          "abstainCount": {
            "type": "string",
            "description": "abstain_count is the weighted sum of abstainers."
          },
          "noCount": {
            "type": "string",
            "description": "no_count is the weighted sum of no votes."
          },
          "noWithVetoCount": {
            "type": "string",
            "description": "no_with_veto_count is the weighted sum of veto."
          }
        },
        "description": "TallyResult represents the sum of weighted votes for each vote option."
      },
      "VotingParams": {
        "type": "object",
        "properties": {
          "votingPeriod": {
            "$ref": "#/components/schemas/Duration"
          }
        },
        "description": "VotingParams defines the params for voting on governance proposals."
      },
      "WeightedVoteOption": {
        "type": "object",
        "properties": {
          "option": {
            "type": "integer",
            "description": "option defines the valid vote options, it must not contain duplicate vote options.",
            "format": "enum"
          },
          "weight": {
            "type": "string",
            "description": "weight is the vote weight associated with the vote option."
          }
        },
        "description": "WeightedVoteOption defines a unit of vote for vote split."
      },
      "GroupInfo": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "id is the unique ID of the group.",
            "format": "uint64"
          },
          "admin": {
            "type": "string",
            "description": "admin is the account address of the group's admin."
          },
          "metadata": {
            "type": "string",
            "description": "metadata is any arbitrary metadata to attached to the group. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#group-1"
          },
          "version": {
            "type": "integer",
            "description": "version is used to track changes to a group's membership structure that would break existing proposals. Whenever any members weight is changed, or any member is added or removed this version is incremented and will cause proposals based on older versions of this group to fail",
            "format": "uint64"
          },
          "totalWeight": {
            "type": "string",
            "description": "total_weight is the sum of the group members' weights."
          },
          "createdAt": {
            "type": "string",
            "description": "created_at is a timestamp specifying when a group was created.",
            "format": "date-time"
          }
        },
        "description": "GroupInfo represents the high-level on-chain information for a group."
      },
      "GroupMember": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "integer",
            "description": "group_id is the unique ID of the group.",
            "format": "uint64"
          },
          "member": {
            "$ref": "#/components/schemas/Member"
          }
        },
        "description": "GroupMember represents the relationship between a group and a member."
      },
      "GroupPolicyInfo": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "address is the account address of group policy."
          },
          "groupId": {
            "type": "integer",
            "description": "group_id is the unique ID of the group.",
            "format": "uint64"
          },
          "admin": {
            "type": "string",
            "description": "admin is the account address of the group admin."
          },
          "metadata": {
            "type": "string",
            "description": "metadata is any arbitrary metadata attached to the group policy. the recommended format of the metadata is to be found here: https://docs.cosmos.network/v0.47/modules/group#decision-policy-1"
          },
          "version": {
            "type": "integer",
            "description": "version is used to track changes to a group's GroupPolicyInfo structure that would create a different result on a running proposal.",
            "format": "uint64"
          },
          "decisionPolicy": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          },
          "createdAt": {
            "type": "string",
            "description": "created_at is a timestamp specifying when a group policy was created.",
            "format": "date-time"
          }
        },
        "description": "GroupPolicyInfo represents the high-level on-chain information for a group policy."
      },
      "Member": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "address is the member's account address."
          },
          "weight": {
            "type": "string",
            "description": "weight is the member's voting weight that should be greater than 0."
          },
          "metadata": {
            "type": "string",
            "description": "metadata is any arbitrary metadata attached to the member."
          },
          "addedAt": {
            "type": "string",
            "description": "added_at is a timestamp specifying when a member was added.",
            "format": "date-time"
          }
        },
        "description": "Member represents a group member with an account address, non-zero weight, metadata and added_at timestamp."
      },
      "QueryGroupInfoResponse": {
        "type": "object",
        "properties": {
          "info": {
            "$ref": "#/components/schemas/GroupInfo"
          }
        },
        "description": "QueryGroupInfoResponse is the Query/GroupInfo response type."
      },
      "QueryGroupMembersResponse": {
        "type": "object",
        "properties": {
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMember"
            },
            "description": "members are the members of the group with given group_id."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGroupMembersResponse is the Query/GroupMembersResponse response type."
      },
      "QueryGroupPoliciesByAdminResponse": {
        "type": "object",
        "properties": {
          "groupPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupPolicyInfo"
            },
            "description": "group_policies are the group policies info with provided admin."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGroupPoliciesByAdminResponse is the Query/GroupPoliciesByAdmin response type."
      },
      "QueryGroupPoliciesByGroupResponse": {
        "type": "object",
        "properties": {
          "groupPolicies": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupPolicyInfo"
            },
            "description": "group_policies are the group policies info associated with the provided group."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGroupPoliciesByGroupResponse is the Query/GroupPoliciesByGroup response type."
      },
      "QueryGroupPolicyInfoResponse": {
        "type": "object",
        "properties": {
          "info": {
            "$ref": "#/components/schemas/GroupPolicyInfo"
          }
        },
        "description": "QueryGroupPolicyInfoResponse is the Query/GroupPolicyInfo response type."
      },
      "QueryGroupsByAdminResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupInfo"
            },
            "description": "groups are the groups info with the provided admin."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGroupsByAdminResponse is the Query/GroupsByAdminResponse response type."
      },
      "QueryGroupsByMemberResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupInfo"
            },
            "description": "groups are the groups info with the provided group member."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGroupsByMemberResponse is the Query/GroupsByMember response type."
      },
      "QueryGroupsResponse": {
        "type": "object",
        "properties": {
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupInfo"
            },
            "description": "`groups` is all the groups present in state."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryGroupsResponse is the Query/Groups response type."
      },
      "QueryProposalsByGroupPolicyResponse": {
        "type": "object",
        "properties": {
          "proposals": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Proposal"
            },
            "description": "proposals are the proposals with given group policy."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryProposalsByGroupPolicyResponse is the Query/ProposalByGroupPolicy response type."
      },
      "QueryVoteByProposalVoterResponse": {
        "type": "object",
        "properties": {
          "vote": {
            "$ref": "#/components/schemas/Vote"
          }
        },
        "description": "QueryVoteByProposalVoterResponse is the Query/VoteByProposalVoter response type."
      },
      "QueryVotesByProposalResponse": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vote"
            },
            "description": "votes are the list of votes for given proposal_id."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryVotesByProposalResponse is the Query/VotesByProposal response type."
      },
      "QueryVotesByVoterResponse": {
        "type": "object",
        "properties": {
          "votes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Vote"
            },
            "description": "votes are the list of votes by given voter."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryVotesByVoterResponse is the Query/VotesByVoter response type."
      },
      "QueryAnnualProvisionsResponse": {
        "type": "object",
        "properties": {
          "annualProvisions": {
            "type": "string",
            "description": "annual_provisions is the current minting annual provisions value.",
            "format": "bytes"
          }
        },
        "description": "QueryAnnualProvisionsResponse is the response type for the Query/AnnualProvisions RPC method."
      },
      "QueryInflationResponse": {
        "type": "object",
        "properties": {
          "inflation": {
            "type": "string",
            "description": "inflation is the current minting inflation value.",
            "format": "bytes"
          }
        },
        "description": "QueryInflationResponse is the response type for the Query/Inflation RPC method."
      },
      "Class": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "id defines the unique identifier of the NFT classification, similar to the contract address of ERC721"
          },
          "name": {
            "type": "string",
            "description": "name defines the human-readable name of the NFT classification. Optional"
          },
          "symbol": {
            "type": "string",
            "description": "symbol is an abbreviated name for nft classification. Optional"
          },
          "description": {
            "type": "string",
            "description": "description is a brief description of nft classification. Optional"
          },
          "uri": {
            "type": "string",
            "description": "uri for the class metadata stored off chain. It can define schema for Class and NFT `Data` attributes. Optional"
          },
          "uriHash": {
            "type": "string",
            "description": "uri_hash is a hash of the document pointed by uri. Optional"
          },
          "data": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          }
        },
        "description": "Class defines the class of the nft type."
      },
      "NFT": {
        "type": "object",
        "properties": {
          "classId": {
            "type": "string",
            "description": "class_id associated with the NFT, similar to the contract address of ERC721"
          },
          "id": {
            "type": "string",
            "description": "id is a unique identifier of the NFT"
          },
          "uri": {
            "type": "string",
            "description": "uri for the NFT metadata stored off chain"
          },
          "uriHash": {
            "type": "string",
            "description": "uri_hash is a hash of the document pointed by uri"
          },
          "data": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          }
        },
        "description": "NFT defines the NFT."
      },
      "QueryBalanceByQueryStringResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "amount is the number of all NFTs of a given class owned by the owner",
            "format": "uint64"
          }
        },
        "description": "QueryBalanceByQueryStringResponse is the response type for the Query/Balance RPC method"
      },
      "QueryClassByQueryStringResponse": {
        "type": "object",
        "properties": {
          "class": {
            "$ref": "#/components/schemas/Class"
          }
        },
        "description": "QueryClassByQueryStringResponse is the response type for the Query/Class RPC method"
      },
      "QueryClassResponse": {
        "type": "object",
        "properties": {
          "class": {
            "$ref": "#/components/schemas/Class"
          }
        },
        "description": "QueryClassResponse is the response type for the Query/Class RPC method"
      },
      "QueryClassesResponse": {
        "type": "object",
        "properties": {
          "classes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Class"
            },
            "description": "class defines the class of the nft type."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryClassesResponse is the response type for the Query/Classes RPC method"
      },
      "QueryNFTByQueryStringResponse": {
        "type": "object",
        "properties": {
          "nft": {
            "$ref": "#/components/schemas/NFT"
          }
        },
        "description": "QueryNFTByQueryStringResponse is the response type for the Query/NFT RPC method"
      },
      "QueryNFTResponse": {
        "type": "object",
        "properties": {
          "nft": {
            "$ref": "#/components/schemas/NFT"
          }
        },
        "description": "QueryNFTResponse is the response type for the Query/NFT RPC method"
      },
      "QueryNFTsResponse": {
        "type": "object",
        "properties": {
          "nfts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NFT"
            },
            "description": "NFT defines the NFT"
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryNFTsResponse is the response type for the Query/NFTs RPC methods"
      },
      "QueryOwnerByQueryStringResponse": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "owner is the owner address of the nft"
          }
        },
        "description": "QueryOwnerByQueryStringResponse is the response type for the Query/Owner RPC method"
      },
      "QueryOwnerResponse": {
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "owner is the owner address of the nft"
          }
        },
        "description": "QueryOwnerResponse is the response type for the Query/Owner RPC method"
      },
      "QuerySupplyByQueryStringResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "amount is the number of all NFTs from the given class",
            "format": "uint64"
          }
        },
        "description": "QuerySupplyByQueryStringResponse is the response type for the Query/Supply RPC method"
      },
      "QuerySupplyResponse": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "integer",
            "description": "amount is the number of all NFTs from the given class",
            "format": "uint64"
          }
        },
        "description": "QuerySupplyResponse is the response type for the Query/Supply RPC method"
      },
      "ParamChange": {
        "type": "object",
        "properties": {
          "subspace": {
            "type": "string"
          },
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "ParamChange defines an individual parameter change, for use in ParameterChangeProposal."
      },
      "QuerySubspacesResponse": {
        "type": "object",
        "properties": {
          "subspaces": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subspace"
            }
          }
        },
        "description": "QuerySubspacesResponse defines the response types for querying for all registered subspaces and all keys for a subspace."
      },
      "Subspace": {
        "type": "object",
        "properties": {
          "subspace": {
            "type": "string"
          },
          "keys": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "Subspace defines a parameter subspace name and all the keys that exist for the subspace."
      },
      "QueryUnclaimedBudgetResponse": {
        "type": "object",
        "properties": {
          "claimedAmount": {
            "$ref": "#/components/schemas/Coin"
          },
          "unclaimedAmount": {
            "$ref": "#/components/schemas/Coin"
          },
          "nextClaimFrom": {
            "type": "string",
            "description": "next_claim_from is the next starting claim time for fund distribution. It represents the time when we can claim funds after the period time interval has passed.",
            "format": "date-time"
          },
          "period": {
            "$ref": "#/components/schemas/Duration"
          },
          "tranchesLeft": {
            "type": "integer",
            "description": "tranches_left is the number of tranches left for the amount to be distributed",
            "format": "uint64"
          }
        },
        "description": "QueryUnclaimedBudgetResponse is the response type for the Query/UnclaimedBudget RPC method."
      },
      "QuerySigningInfoResponse": {
        "type": "object",
        "properties": {
          "valSigningInfo": {
            "$ref": "#/components/schemas/ValidatorSigningInfo"
          }
        },
        "description": "QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC method"
      },
      "QuerySigningInfosResponse": {
        "type": "object",
        "properties": {
          "info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorSigningInfo"
            },
            "description": "info is the signing info of all validators"
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC method"
      },
      "ValidatorSigningInfo": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          },
          "startHeight": {
            "type": "integer",
            "description": "Height at which validator was first a candidate OR was un-jailed",
            "format": "int64"
          },
          "indexOffset": {
            "type": "integer",
            "description": "DEPRECATED: Index which is incremented every time a validator is bonded in a block and _may_ have signed a pre-commit or not. This in conjunction with the signed_blocks_window param determines the index in the missed block bitmap.",
            "format": "int64"
          },
          "jailedUntil": {
            "type": "string",
            "description": "Timestamp until which the validator is jailed due to liveness downtime.",
            "format": "date-time"
          },
          "tombstoned": {
            "type": "boolean",
            "description": "Whether or not a validator has been tombstoned (killed out of validator set). It is set once the validator commits an equivocation or for any other configured misbehavior."
          },
          "missedBlocksCounter": {
            "type": "integer",
            "description": "A counter of missed (unsigned) blocks. It is used to avoid unnecessary reads in the missed block bitmap.",
            "format": "int64"
          }
        },
        "description": "ValidatorSigningInfo defines a validator's signing info for monitoring their liveness activity."
      },
      "Delegation": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "delegator_address is the encoded address of the delegator."
          },
          "validatorAddress": {
            "type": "string",
            "description": "validator_address is the encoded address of the validator."
          },
          "shares": {
            "type": "string",
            "description": "shares define the delegation shares received."
          }
        },
        "description": "Delegation represents the bond with tokens held by an account. It is owned by one delegator, and is associated with the voting power of one validator."
      },
      "DelegationResponse": {
        "type": "object",
        "properties": {
          "delegation": {
            "$ref": "#/components/schemas/Delegation"
          },
          "balance": {
            "$ref": "#/components/schemas/Coin"
          }
        },
        "description": "DelegationResponse is equivalent to Delegation except that it contains a balance in addition to shares which is more suitable for client responses."
      },
      "HistoricalInfo": {
        "type": "object",
        "properties": {
          "header": {
            "$ref": "#/components/schemas/Header"
          },
          "valset": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validator"
            }
          }
        },
        "description": "HistoricalInfo contains header and validator information for a given block. It is stored as part of staking module's state, which persists the `n` most recent HistoricalInfo (`n` is set by the staking module's `historical_entries` parameter)."
      },
      "Pool": {
        "type": "object",
        "properties": {
          "notBondedTokens": {
            "type": "string"
          },
          "bondedTokens": {
            "type": "string"
          }
        },
        "description": "Pool is used for tracking bonded and not-bonded token supply of the bond denomination."
      },
      "PublicKey": {
        "type": "object",
        "properties": {
          "ed25519": {
            "type": "string",
            "format": "bytes"
          },
          "secp256k1": {
            "type": "string",
            "format": "bytes"
          },
          "bls12381": {
            "type": "string",
            "format": "bytes"
          },
          "bn254": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "PublicKey is a ED25519 or a secp256k1 public key."
      },
      "QueryDelegationResponse": {
        "type": "object",
        "properties": {
          "delegationResponse": {
            "$ref": "#/components/schemas/DelegationResponse"
          }
        },
        "description": "QueryDelegationResponse is response type for the Query/Delegation RPC method."
      },
      "QueryDelegatorDelegationsResponse": {
        "type": "object",
        "properties": {
          "delegationResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegationResponse"
            },
            "description": "delegation_responses defines all the delegations' info of a delegator."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryDelegatorDelegationsResponse is response type for the Query/DelegatorDelegations RPC method."
      },
      "QueryDelegatorUnbondingDelegationsResponse": {
        "type": "object",
        "properties": {
          "unbondingResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingDelegation"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryUnbondingDelegatorDelegationsResponse is response type for the Query/UnbondingDelegatorDelegations RPC method."
      },
      "QueryDelegatorValidatorResponse": {
        "type": "object",
        "properties": {
          "validator": {
            "$ref": "#/components/schemas/Validator"
          }
        },
        "description": "QueryDelegatorValidatorResponse response type for the Query/DelegatorValidator RPC method."
      },
      "QueryHistoricalInfoResponse": {
        "type": "object",
        "properties": {
          "hist": {
            "$ref": "#/components/schemas/HistoricalInfo"
          }
        },
        "description": "QueryHistoricalInfoResponse is response type for the Query/HistoricalInfo RPC method."
      },
      "QueryPoolResponse": {
        "type": "object",
        "properties": {
          "pool": {
            "$ref": "#/components/schemas/Pool"
          }
        },
        "description": "QueryPoolResponse is response type for the Query/Pool RPC method."
      },
      "QueryRedelegationsResponse": {
        "type": "object",
        "properties": {
          "redelegationResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedelegationResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryRedelegationsResponse is response type for the Query/Redelegations RPC method."
      },
      "QueryUnbondingDelegationResponse": {
        "type": "object",
        "properties": {
          "unbond": {
            "$ref": "#/components/schemas/UnbondingDelegation"
          }
        },
        "description": "QueryDelegationResponse is response type for the Query/UnbondingDelegation RPC method."
      },
      "QueryValidatorDelegationsResponse": {
        "type": "object",
        "properties": {
          "delegationResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DelegationResponse"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryValidatorDelegationsResponse is response type for the Query/ValidatorDelegations RPC method"
      },
      "QueryValidatorResponse": {
        "type": "object",
        "properties": {
          "validator": {
            "$ref": "#/components/schemas/Validator"
          }
        },
        "description": "QueryValidatorResponse is response type for the Query/Validator RPC method"
      },
      "QueryValidatorUnbondingDelegationsResponse": {
        "type": "object",
        "properties": {
          "unbondingResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingDelegation"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryValidatorUnbondingDelegationsResponse is response type for the Query/ValidatorUnbondingDelegations RPC method."
      },
      "QueryValidatorsResponse": {
        "type": "object",
        "properties": {
          "validators": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Validator"
            }
          },
          "validatorInfo": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidatorInfo"
            },
            "description": "validator_info contains additional information for each validator. The order of the elements in this list corresponds to the order of the elements in the validators list. For example, if you want the ValidatorInfo for the third validator in the validators list, you should look at the third element in the validator_info list."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "QueryValidatorsResponse is response type for the Query/Validators RPC method"
      },
      "Redelegation": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "delegator_address is the bech32-encoded address of the delegator."
          },
          "validatorSrcAddress": {
            "type": "string",
            "description": "validator_src_address is the validator redelegation source operator address."
          },
          "validatorDstAddress": {
            "type": "string",
            "description": "validator_dst_address is the validator redelegation destination operator address."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedelegationEntry"
            },
            "description": "entries are the redelegation entries."
          }
        },
        "description": "Redelegation contains the list of a particular delegator's redelegating bonds from a particular source validator to a particular destination validator."
      },
      "RedelegationEntry": {
        "type": "object",
        "properties": {
          "creationHeight": {
            "type": "integer",
            "description": "creation_height  defines the height which the redelegation took place.",
            "format": "int64"
          },
          "completionTime": {
            "type": "string",
            "description": "completion_time defines the unix time for redelegation completion.",
            "format": "date-time"
          },
          "initialBalance": {
            "type": "string",
            "description": "initial_balance defines the initial balance when redelegation started."
          },
          "sharesDst": {
            "type": "string",
            "description": "shares_dst is the amount of destination-validator shares created by redelegation."
          },
          "unbondingId": {
            "type": "integer",
            "description": "Incrementing id that uniquely identifies this entry",
            "format": "uint64"
          },
          "unbondingOnHoldRefCount": {
            "type": "integer",
            "description": "Strictly positive if this entry's unbonding has been stopped by external modules",
            "format": "int64"
          }
        },
        "description": "RedelegationEntry defines a redelegation object with relevant metadata."
      },
      "RedelegationEntryResponse": {
        "type": "object",
        "properties": {
          "redelegationEntry": {
            "$ref": "#/components/schemas/RedelegationEntry"
          },
          "balance": {
            "type": "string"
          }
        },
        "description": "RedelegationEntryResponse is equivalent to a RedelegationEntry except that it contains a balance in addition to shares which is more suitable for client responses."
      },
      "RedelegationResponse": {
        "type": "object",
        "properties": {
          "redelegation": {
            "$ref": "#/components/schemas/Redelegation"
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RedelegationEntryResponse"
            }
          }
        },
        "description": "RedelegationResponse is equivalent to a Redelegation except that its entries contain a balance in addition to shares which is more suitable for client responses."
      },
      "UnbondingDelegation": {
        "type": "object",
        "properties": {
          "delegatorAddress": {
            "type": "string",
            "description": "delegator_address is the encoded address of the delegator."
          },
          "validatorAddress": {
            "type": "string",
            "description": "validator_address is the encoded address of the validator."
          },
          "entries": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UnbondingDelegationEntry"
            },
            "description": "entries are the unbonding delegation entries."
          }
        },
        "description": "UnbondingDelegation stores all of a single delegator's unbonding bonds for a single validator in an time-ordered list."
      },
      "UnbondingDelegationEntry": {
        "type": "object",
        "properties": {
          "creationHeight": {
            "type": "integer",
            "description": "creation_height is the height which the unbonding took place.",
            "format": "int64"
          },
          "completionTime": {
            "type": "string",
            "description": "completion_time is the unix time for unbonding completion.",
            "format": "date-time"
          },
          "initialBalance": {
            "type": "string",
            "description": "initial_balance defines the tokens initially scheduled to receive at completion."
          },
          "balance": {
            "type": "string",
            "description": "balance defines the tokens to receive at completion."
          },
          "unbondingId": {
            "type": "integer",
            "description": "Incrementing id that uniquely identifies this entry",
            "format": "uint64"
          },
          "unbondingOnHoldRefCount": {
            "type": "integer",
            "description": "Strictly positive if this entry's unbonding has been stopped by external modules",
            "format": "int64"
          }
        },
        "description": "UnbondingDelegationEntry defines an unbonding object with relevant metadata."
      },
      "ValidatorInfo": {
        "type": "object",
        "properties": {
          "consensusAddress": {
            "type": "string",
            "description": "consensus_address is the consensus address of the validator."
          }
        },
        "description": "ValidatorInfo contains the validator's address and public key."
      },
      "ABCIMessageLog": {
        "type": "object",
        "properties": {
          "msgIndex": {
            "type": "integer",
            "format": "uint32"
          },
          "log": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StringEvent"
            },
            "description": "Events contains a slice of Event objects that were emitted during some execution."
          }
        },
        "description": "ABCIMessageLog defines a structure containing an indexed tx ABCI message log."
      },
      "Attribute": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        },
        "description": "Attribute defines an attribute wrapper where the key and value are strings instead of raw bytes."
      },
      "AuthInfo": {
        "type": "object",
        "properties": {
          "signerInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignerInfo"
            },
            "description": "signer_infos defines the signing modes for the required signers. The number and order of elements must match the required signers from TxBody's messages. The first element is the primary signer and the one which pays the fee."
          },
          "fee": {
            "$ref": "#/components/schemas/Fee"
          },
          "tip": {
            "$ref": "#/components/schemas/Tip"
          }
        },
        "description": "AuthInfo describes the fee and signer modes that are used to sign a transaction."
      },
      "BroadcastTxRequest": {
        "type": "object",
        "properties": {
          "txBytes": {
            "type": "string",
            "description": "tx_bytes is the raw transaction.",
            "format": "bytes"
          },
          "mode": {
            "type": "integer",
            "format": "enum"
          }
        },
        "description": "BroadcastTxRequest is the request type for the Service.BroadcastTxRequest RPC method."
      },
      "BroadcastTxResponse": {
        "type": "object",
        "properties": {
          "txResponse": {
            "$ref": "#/components/schemas/TxResponse"
          }
        },
        "description": "BroadcastTxResponse is the response type for the Service.BroadcastTx method."
      },
      "CompactBitArray": {
        "type": "object",
        "properties": {
          "extraBitsStored": {
            "type": "integer",
            "format": "uint32"
          },
          "elems": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "CompactBitArray is an implementation of a space efficient bit array. This is used to ensure that the encoded data takes up a minimal amount of space after proto encoding. This is not thread safe, and is not intended for concurrent usage."
      },
      "Event": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventAttribute"
            }
          }
        },
        "description": "Event allows application developers to attach additional information to ResponseFinalizeBlock and ResponseCheckTx. Up to 0.37, this could also be used in ResponseBeginBlock, ResponseEndBlock, and ResponseDeliverTx. Later, transactions may be queried using these events."
      },
      "EventAttribute": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "value": {
            "type": "string"
          },
          "index": {
            "type": "boolean"
          }
        },
        "description": "EventAttribute is a single key-value pair, associated with an event."
      },
      "Fee": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": "amount is the amount of coins to be paid as a fee"
          },
          "gasLimit": {
            "type": "integer",
            "description": "gas_limit is the maximum gas that can be used in transaction processing before an out of gas error occurs",
            "format": "uint64"
          },
          "payer": {
            "type": "string",
            "description": "if unset, the first signer is responsible for paying the fees. If set, the specified account must pay the fees. the payer must be a tx signer (and thus have signed this field in AuthInfo). setting this field does *not* change the ordering of required signers for the transaction."
          },
          "granter": {
            "type": "string",
            "description": "if set, the fee payer (either the first signer or the value of the payer field) requests that a fee grant be used to pay fees instead of the fee payer's own balance. If an appropriate fee grant does not exist or the chain does not support fee grants, this will fail"
          }
        },
        "description": "Fee includes the amount of coins paid in fees and the maximum gas to be used by the transaction. The ratio yields an effective \"gasprice\", which must be above some minimum to be accepted into the mempool."
      },
      "GasInfo": {
        "type": "object",
        "properties": {
          "gasWanted": {
            "type": "integer",
            "description": "GasWanted is the maximum units of work we allow this tx to perform.",
            "format": "uint64"
          },
          "gasUsed": {
            "type": "integer",
            "description": "GasUsed is the amount of gas actually consumed.",
            "format": "uint64"
          }
        },
        "description": "GasInfo defines tx execution gas context."
      },
      "GetBlockWithTxsResponse": {
        "type": "object",
        "properties": {
          "txs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tx"
            },
            "description": "txs are the transactions in the block."
          },
          "blockId": {
            "$ref": "#/components/schemas/BlockID"
          },
          "block": {
            "$ref": "#/components/schemas/Block"
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          }
        },
        "description": "GetBlockWithTxsResponse is the response type for the Service.GetBlockWithTxs method."
      },
      "GetTxResponse": {
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/Tx"
          },
          "txResponse": {
            "$ref": "#/components/schemas/TxResponse"
          }
        },
        "description": "GetTxResponse is the response type for the Service.GetTx method."
      },
      "GetTxsEventResponse": {
        "type": "object",
        "properties": {
          "txs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Tx"
            },
            "description": "txs is the list of queried transactions."
          },
          "txResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TxResponse"
            },
            "description": "tx_responses is the list of queried TxResponses."
          },
          "pagination": {
            "$ref": "#/components/schemas/PageResponse"
          },
          "total": {
            "type": "integer",
            "description": "total is total number of results available",
            "format": "uint64"
          }
        },
        "description": "GetTxsEventResponse is the response type for the Service.TxsByEvents RPC method."
      },
      "ModeInfo": {
        "type": "object",
        "properties": {
          "single": {
            "$ref": "#/components/schemas/ModeInfo_Single"
          },
          "multi": {
            "$ref": "#/components/schemas/ModeInfo_Multi"
          }
        },
        "description": "ModeInfo describes the signing mode of a single or nested multisig signer."
      },
      "ModeInfo_Multi": {
        "type": "object",
        "properties": {
          "bitarray": {
            "$ref": "#/components/schemas/CompactBitArray"
          },
          "modeInfos": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModeInfo"
            },
            "description": "mode_infos is the corresponding modes of the signers of the multisig which could include nested multisig public keys"
          }
        },
        "description": "Multi is the mode info for a multisig public key"
      },
      "ModeInfo_Single": {
        "type": "object",
        "properties": {
          "mode": {
            "type": "integer",
            "description": "mode is the signing mode of the single signer",
            "format": "enum"
          }
        },
        "description": "Single is the mode info for a single signer. It is structured as a message to allow for additional fields such as locale for SIGN_MODE_TEXTUAL in the future"
      },
      "Result": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Data is any data returned from message or handler execution. It MUST be length prefixed in order to separate data from multiple message executions. Deprecated. This field is still populated, but prefer msg_response instead because it also contains the Msg response typeURL.",
            "format": "bytes"
          },
          "log": {
            "type": "string",
            "description": "Log contains the log information from message or handler execution."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "description": "Events contains a slice of Event objects that were emitted during message or handler execution."
          },
          "msgResponses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "msg_responses contains the Msg handler responses type packed in Anys."
          }
        },
        "description": "Result is the union of ResponseFormat and ResponseCheckTx."
      },
      "SignerInfo": {
        "type": "object",
        "properties": {
          "publicKey": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          },
          "modeInfo": {
            "$ref": "#/components/schemas/ModeInfo"
          },
          "sequence": {
            "type": "integer",
            "description": "sequence is the sequence of the account, which describes the number of committed transactions signed by a given address. It is used to prevent replay attacks.",
            "format": "uint64"
          }
        },
        "description": "SignerInfo describes the public key and signing mode of a single top-level signer."
      },
      "SimulateRequest": {
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/Tx"
          },
          "txBytes": {
            "type": "string",
            "description": "tx_bytes is the raw transaction.",
            "format": "bytes"
          }
        },
        "description": "SimulateRequest is the request type for the Service.Simulate RPC method."
      },
      "SimulateResponse": {
        "type": "object",
        "properties": {
          "gasInfo": {
            "$ref": "#/components/schemas/GasInfo"
          },
          "result": {
            "$ref": "#/components/schemas/Result"
          }
        },
        "description": "SimulateResponse is the response type for the Service.SimulateRPC method."
      },
      "StringEvent": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attribute"
            }
          }
        },
        "description": "StringEvent defines en Event object wrapper where all the attributes contain key/value pairs that are strings instead of raw bytes."
      },
      "Tip": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Coin"
            },
            "description": "amount is the amount of the tip"
          },
          "tipper": {
            "type": "string",
            "description": "tipper is the address of the account paying for the tip"
          }
        },
        "description": "Tip is the tip used for meta-transactions."
      },
      "Tx": {
        "type": "object",
        "properties": {
          "body": {
            "$ref": "#/components/schemas/TxBody"
          },
          "authInfo": {
            "$ref": "#/components/schemas/AuthInfo"
          },
          "signatures": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "bytes"
            },
            "description": "signatures is a list of signatures that matches the length and order of AuthInfo's signer_infos to allow connecting signature meta information like public key and signing mode by position."
          }
        },
        "description": "Tx is the standard type used for broadcasting transactions."
      },
      "TxBody": {
        "type": "object",
        "properties": {
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "messages is a list of messages to be executed. The required signers of those messages define the number and order of elements in AuthInfo's signer_infos and Tx's signatures. Each required signer address is added to the list only the first time it occurs. By convention, the first required signer (usually from the first message) is referred to as the primary signer and pays the fee for the whole transaction."
          },
          "memo": {
            "type": "string",
            "description": "memo is any arbitrary note/comment to be added to the transaction. WARNING: in clients, any publicly exposed text should not be called memo, but should be called `note` instead (see https://github.com/cosmos/cosmos-sdk/issues/9122)."
          },
          "timeoutHeight": {
            "type": "integer",
            "description": "timeout_height is the block height after which this transaction will not be processed by the chain.",
            "format": "uint64"
          },
          "unordered": {
            "type": "boolean",
            "description": "unordered, when set to true, indicates that the transaction signer(s) intend for the transaction to be evaluated and executed in an un-ordered fashion. Specifically, the account's nonce will NOT be checked or incremented, which allows for fire-and-forget as well as concurrent transaction execution. Note, when set to true, the existing 'timeout_height' value must be set and will be used to correspond to a time_stamp in which the transaction is deemed valid."
          },
          "timeoutTimestamp": {
            "type": "string",
            "description": "timeout_timestamp is the block time after which this transaction will not be processed by the chain. Note, if unordered=true this value MUST be set and will act as a short-lived TTL in which the transaction is deemed valid and kept in memory to prevent duplicates.",
            "format": "date-time"
          },
          "extensionOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "extension_options are arbitrary options that can be added by chains when the default options are not sufficient. If any of these are present and can't be handled, the transaction will be rejected"
          },
          "nonCriticalExtensionOptions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GoogleProtobufAny"
            },
            "description": "extension_options are arbitrary options that can be added by chains when the default options are not sufficient. If any of these are present and can't be handled, they will be ignored"
          }
        },
        "description": "TxBody is the body of a transaction that all signers sign over."
      },
      "TxDecodeAminoRequest": {
        "type": "object",
        "properties": {
          "aminoBinary": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "TxDecodeAminoRequest is the request type for the Service.TxDecodeAmino RPC method."
      },
      "TxDecodeAminoResponse": {
        "type": "object",
        "properties": {
          "aminoJson": {
            "type": "string"
          }
        },
        "description": "TxDecodeAminoResponse is the response type for the Service.TxDecodeAmino RPC method."
      },
      "TxDecodeRequest": {
        "type": "object",
        "properties": {
          "txBytes": {
            "type": "string",
            "description": "tx_bytes is the raw transaction.",
            "format": "bytes"
          }
        },
        "description": "TxDecodeRequest is the request type for the Service.TxDecode RPC method."
      },
      "TxDecodeResponse": {
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/Tx"
          }
        },
        "description": "TxDecodeResponse is the response type for the Service.TxDecode method."
      },
      "TxEncodeAminoRequest": {
        "type": "object",
        "properties": {
          "aminoJson": {
            "type": "string"
          }
        },
        "description": "TxEncodeAminoRequest is the request type for the Service.TxEncodeAmino RPC method."
      },
      "TxEncodeAminoResponse": {
        "type": "object",
        "properties": {
          "aminoBinary": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "TxEncodeAminoResponse is the response type for the Service.TxEncodeAmino RPC method."
      },
      "TxEncodeRequest": {
        "type": "object",
        "properties": {
          "tx": {
            "$ref": "#/components/schemas/Tx"
          }
        },
        "description": "TxEncodeRequest is the request type for the Service.TxEncode RPC method."
      },
      "TxEncodeResponse": {
        "type": "object",
        "properties": {
          "txBytes": {
            "type": "string",
            "description": "tx_bytes is the encoded transaction bytes.",
            "format": "bytes"
          }
        },
        "description": "TxEncodeResponse is the response type for the Service.TxEncode method."
      },
      "TxResponse": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "The block height",
            "format": "int64"
          },
          "txhash": {
            "type": "string",
            "description": "The transaction hash."
          },
          "codespace": {
            "type": "string",
            "description": "Namespace for the Code"
          },
          "code": {
            "type": "integer",
            "description": "Response code.",
            "format": "uint32"
          },
          "data": {
            "type": "string",
            "description": "Result bytes, if any."
          },
          "rawLog": {
            "type": "string",
            "description": "The output of the application's logger (raw string). May be non-deterministic."
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ABCIMessageLog"
            },
            "description": "The output of the application's logger (typed). May be non-deterministic."
          },
          "info": {
            "type": "string",
            "description": "Additional information. May be non-deterministic."
          },
          "gasWanted": {
            "type": "integer",
            "description": "Amount of gas requested for transaction.",
            "format": "int64"
          },
          "gasUsed": {
            "type": "integer",
            "description": "Amount of gas consumed by transaction.",
            "format": "int64"
          },
          "tx": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          },
          "timestamp": {
            "type": "string",
            "description": "Time of the previous block. For heights > 1, it's the weighted median of the timestamps of the valid votes in the block.LastCommit. For height == 1, it's genesis time."
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            },
            "description": "Events defines all the events emitted by processing a transaction. Note, these events include those emitted by processing all the messages and those emitted from the ante. Whereas Logs contains the events, with additional metadata, emitted only by processing the messages."
          }
        },
        "description": "TxResponse defines a structure containing relevant tx data and metadata. The tags are stringified and the log is JSON decoded."
      },
      "ModuleVersion": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "name of the app module"
          },
          "version": {
            "type": "integer",
            "description": "consensus version of the app module",
            "format": "uint64"
          }
        },
        "description": "ModuleVersion specifies a module and its consensus version."
      },
      "Plan": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Sets the name for the upgrade. This name will be used by the upgraded version of the software to apply any special \"on-upgrade\" commands during the first BeginBlock method after the upgrade is applied. It is also used to detect whether a software version can handle a given upgrade. If no upgrade handler with this name has been set in the software, it will be assumed that the software is out-of-date when the upgrade Time or Height is reached and the software will exit."
          },
          "time": {
            "type": "string",
            "description": "Deprecated: Time based upgrades have been deprecated. Time based upgrade logic has been removed from the SDK. If this field is not empty, an error will be thrown.",
            "format": "date-time"
          },
          "height": {
            "type": "integer",
            "description": "The height at which the upgrade must be performed.",
            "format": "int64"
          },
          "info": {
            "type": "string",
            "description": "Any application specific upgrade info to be included on-chain such as a git commit that validators could automatically upgrade to"
          },
          "upgradedClientState": {
            "$ref": "#/components/schemas/GoogleProtobufAny"
          }
        },
        "description": "Plan specifies information about a planned upgrade and when it should occur."
      },
      "QueryAppliedPlanResponse": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "height is the block height at which the plan was applied.",
            "format": "int64"
          }
        },
        "description": "QueryAppliedPlanResponse is the response type for the Query/AppliedPlan RPC method."
      },
      "QueryAuthorityResponse": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string"
          }
        },
        "description": "QueryAuthorityResponse is the response type for Query/Authority"
      },
      "QueryCurrentPlanResponse": {
        "type": "object",
        "properties": {
          "plan": {
            "$ref": "#/components/schemas/Plan"
          }
        },
        "description": "QueryCurrentPlanResponse is the response type for the Query/CurrentPlan RPC method."
      },
      "QueryModuleVersionsResponse": {
        "type": "object",
        "properties": {
          "moduleVersions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleVersion"
            },
            "description": "module_versions is a list of module names with their consensus versions."
          }
        },
        "description": "QueryModuleVersionsResponse is the response type for the Query/ModuleVersions RPC method."
      },
      "QueryUpgradedConsensusStateResponse": {
        "type": "object",
        "properties": {
          "upgradedConsensusState": {
            "type": "string",
            "format": "bytes"
          }
        },
        "description": "QueryUpgradedConsensusStateResponse is the response type for the Query/UpgradedConsensusState RPC method."
      },
      "DenomAuthorityMetadata": {
        "type": "object",
        "properties": {
          "admin": {
            "type": "string",
            "description": "Can be empty for no admin, or a valid address"
          }
        },
        "description": "DenomAuthorityMetadata specifies metadata for addresses that have specific capabilities over a token factory denom. Right now there is only one Admin permission, but is planned to be extended to the future."
      },
      "QueryDenomAuthorityMetadataResponse": {
        "type": "object",
        "properties": {
          "authorityMetadata": {
            "$ref": "#/components/schemas/DenomAuthorityMetadata"
          }
        },
        "description": "QueryDenomAuthorityMetadataResponse defines the response structure for the DenomAuthorityMetadata gRPC query."
      },
      "QueryDenomsFromCreatorResponse": {
        "type": "object",
        "properties": {
          "denoms": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "description": "QueryDenomsFromCreatorRequest defines the response structure for the DenomsFromCreator gRPC query."
      }
    }
  }
}
